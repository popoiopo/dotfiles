#+TITLE: Emacs configuration
#+DESCRIPTION: An org-babel based emacs configuration
#+LANGUAGE: en
#+PROPERTY: results silent
#+STARTUP: overview
* Learning resources
|------------------------+-----------------------------------------------------------------------------|
| Link                   | description                                                                 |
|------------------------+-----------------------------------------------------------------------------|
| C-h t                  | Emacs tutorial                                                              |
| [[https://www.youtube.com/channel/UCDEtZ7AKmwS0_GNJog01D2g][Uncle Dave youtube]]     | Uncle Dave's youtube videos explain emacs configuration                     |
| [[https://www.youtube.com/channel/UCxkMDXQ5qzYOgXPRnOBrp1w][Mike Zamansky youtube]]  | Has a great set of videos on Emacs, computer science etc                    |
| [[https://www.udemy.com/course/getting-yourself-organized-with-org-mode/][Rainer Konig udemy]]     | Rainer Konig Udemy org-mode course, structured pdf and videos               |
| [[https://www.youtube.com/channel/UCfbGTpcJyEOMwKP-eYz3_fg][Rainer Konig youtube]]   | Youtube channel also from Rainer                                            |
| [[https://www.youtube.com/channel/UCQp2VLAOlvq142YN3JO3y8w][John Kitchin youtube]]   | This guy made org-ref and is an academic sensei                             |
| [[http://kitchingroup.cheme.cmu.edu/blog/category/emacs/1/][Kitchin research group]] | John Kitchin's research group site has a ton of resources emacs related     |
| C-h                    | This brings up a list with all types of help. E.g.C-h b describes bindings. |
| C-h c COMMAND          | Display name of the function (brief description of the command)             |
| C-h k COMMAND          | Display documentation of the function by typing the command                 |
| C-h f FUNCTION NAME    | Display documentation of the function by typing the function name           |
| C-h v                  | Display documentation of variables                                          |
| C-h a                  | Type keyword to list all commands whose names contain that keyword          |
| C-h i                  | Info - Read included manuals of installed packages                          |
|------------------------+-----------------------------------------------------------------------------|
* Explanation
So! You've found yourself on my personal emacs configuration files. First of all, welcome! To start, there are a total of three files needed for my configuration.

1. *init.el* is where the initial configuration of emacs begins. We initialize some stuff so we can use packages, require org, and load the other two important files!
2. *config.org* that is this file! Here we do some basic configuration that does not need a lot from your part. It is just my bare-bones emacs without fancy (and very usefull) extra stuff. The only thing to get started here, is to write down the path to the folder in which these three files live.
3. *config_custom.org* is where the magic happens. Well, extensive functionality that turns emacs from amazing to insane in the membrane! Here we also put shortcuts to other config files for quick access, we use org-journal, org-ref and org-roam (amazing combination). Basically everything that requires a bit more configuration on your part.

Have fun, and don't forget to adjust the emacs path!
* File layout and paths
Some standard files for configuring. The only important thing here to edit is *emacs-dir* to the directory of your emacs configuration. Don't forget!!!
#+BEGIN_SRC emacs-lisp
  ;; General directories
  (setq github-dir "~/github/")
  (setq dropbox-dir "~/Dropbox/")
  (setq emacs-dir "~/.emacs_test.d/")

  ;; Configuration files
  (setq emacs-config-org-file (concat emacs-dir "config.org"))
  (setq emacs-config-custom-org-file (concat emacs-dir "config_custom.org"))

  ;; More specific files
  (setq amx-items (concat emacs-dir "amx-items"))
  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")

  ;; Backup files
  (setq backup-per-save (concat emacs-dir "backup/per-save"))
  (setq backup-per-session (concat emacs-dir "backup/per-session"))

  ;; Configuration files
  (setq zshrc-file "~/.zshrc")
  (setq skhdrc-file "~/.skhdrc")
  (setq qmk-keymap-file "~/qmk_firmware/keyboards/keebio/iris/keymaps/popoiopo/keymap.c")
  (setq yabai-file "~/.yabairc")
  (setq qutebrowser-file "~/.qutebrowser/qutemacs.py")

  ;; Roam
  (setq roamnotes-path (concat dropbox-dir "roam_notes/"))
  (setq roam-db-path "~/org-roam.db")

  ;; More specific files
  (setq org-journal-path (concat roamnotes-path "org-journal/"))
  (setq journal-file (concat org-journal-path "2021.org"))

  ;; Reference managing
  (setq bib-folder-path (concat roamnotes-path "papers_and_articles/"))
  (setq bib-org-file (concat bib-folder-path "references.org"))
  (setq references-bib-file (concat bib-folder-path "references.bib"))

  ;; GTD
  (setq gtd-path (concat roamnotes-path "gtd/"))
  (setq work-gtd-file (concat gtd-path "work.org"))
  (setq personal-gtd-file (concat gtd-path "personal.org"))
  (setq phone-gtd-file (concat gtd-path "phone.org"))
#+END_SRC
* Configuration
** Autocompletions
*** Company (autocompletion framework)
Company is a text completion framework for Emacs. The name stands for "complete anything". It uses pluggable back-ends and front-ends to retrieve and display completion candidates. See documentation on [[http://company-mode.github.io/][this site]].
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
*** Electric pairing
Automatically pair the following elements on autocorrect. This is enabled in the [[*Standards (minor modes and minor improvements)][Standards (minor modes and minor improvements)]] through electric-pair-mode.

#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              (?\{ . ?\})
                              (?\< . ?\>)
                              ))
#+END_SRC
*** IDO autocomplete filename searches
Ivy takes care of autocompleting filenames in the minibuffer at the bottom of the screen. It also keeps typing paths to a minimum as a folder is just an enter away.
#+BEGIN_SRC emacs-lisp
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (global-set-key "\C-s" 'swiper)
#+END_SRC

Makes sure that M-x also generates suggestions. Otherwise you'd have to remember everything and not get autocompleted in M-x functions. Amx is the newer version of smex.
#+BEGIN_SRC emacs-lisp
  (use-package amx
    :ensure t
    :after ivy
    :custom
    (amx-backend 'auto)
    (ams-save-file amx-items)
    (amx-history-length 50)
    (amx-show-key-bindings nil)
    :config
    (amx-mode 1))
#+END_SRC
*** Yassnippet
Yassnippet is the templating system that is used. It creates a folder called snippets in which you can make a folder for each major mode you'd want a template for. E.g., python can have a few snippets to prettyfie a matplotlib graph, or org can have a template for exporting to a latex article or an html webpage.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config (use-package yasnippet-snippets
              :ensure t)
    (yas-reload-all))
  (yas-global-mode 1)
#+END_SRC
** Buffers
All things buffer related
*** Buffer-move
Be able to swap buffers. See [[*Custom keystrokes][Custom keystrokes]] for shortcuts (buf-move-xxx).
#+BEGIN_SRC emacs-lisp
(use-package buffer-move
  :ensure t)
#+END_SRC
*** Ibuffer
Just a new buffer that lists the open buffers. It provides easy ways to close multiple buffers at once and navigate through them.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-expert t)
#+END_SRC
*** Killing buffers
**** Always kill current buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC
**** Kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
#+END_SRC
*** Narrowing
Function to easily narrow and widen an area of code. If you select a piece of text, call this function, it will create a buffer with just that in it. This makes searching, or exporting just a part of something much easier.
#+BEGIN_SRC emacs-lisp
  (defun narrow-or-widen-dwim (p)
    "Widen if buffer is narrowed, narrow-dwim otherwise.
  Dwim means: region, org-src-block, org-subtree, or
  defun, whichever applies first. Narrowing to
  org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer
  is already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning)
                             (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing
           ;; command. Remove this first conditional if
           ;; you don't want it.
           (cond ((ignore-errors (org-edit-src-code) t)
                  (delete-other-windows))
                 ((ignore-errors (org-narrow-to-block) t))
                 (t (org-narrow-to-subtree))))
          ((derived-mode-p 'latex-mode)
           (LaTeX-narrow-to-environment))
          (t (narrow-to-defun))))
#+END_SRC
*** Switch to previous buffer
Small function to switch to previously used buffer.
#+BEGIN_SRC emacs-lisp
  (defun er-switch-to-previous-buffer ()
    "Switch to previously open buffer.
     Repeated invocations toggle between the two most recently open buffers."
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer))))

  (global-set-key (kbd "C-c b") 'er-switch-to-previous-buffer)
#+END_SRC
*** switchwindow
Make switching buffer with C-x o easier. It provides you with shortcuts on the homerow to which buffer you want to go. Otherwise, you'd need to cycle through them which is aweful if you have multiple buffers on the screen.
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "h" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
*** Toggle fullscreen buffer
When using multiple buffers at the same time, sometimes it's nice to toggle a single buffer as fullscreen.
#+BEGIN_SRC emacs-lisp
  (defun toggle-maximize-buffer () "Maximize buffer"
    (interactive)
    (if (= 1 (length (window-list)))
        (jump-to-register '_)
      (progn
        (window-configuration-to-register '_)
        (delete-other-windows))))
  (global-set-key (kbd "C-M-f") 'toggle-maximize-buffer)
#+END_SRC
*** window splitting function
If you split the window into two buffers, follow the new buffer. You make a new one to work in there right?!
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
*** Rotate layout
#+BEGIN_SRC emacs-lisp
 (use-package rotate
    :ensure t)
#+END_SRC
** Custom functions
*** Backup files
Here we set where each file is backed up, how many versions of each file is backed
#+BEGIN_SRC emacs-lisp
  (setq version-control t     ;; Use version numbers for backups.
        kept-new-versions 10  ;; Number of newest versions to keep.
        kept-old-versions 0   ;; Number of oldest versions to keep.
        delete-old-versions t ;; Don't ask to delete excess backup versions.
        backup-by-copying t  ;; Copy all files, don't rename them.
        auto-save-interval 100 ;; Change interval of characters to which auto-save is enabled
        )

  (setq vc-make-backup-files t)

  ;; Default and per-save backups go here:
  (setq backup-directory-alist '(("" . "~/.emacs_test.d/backup/per-save")))

  (defun force-backup-of-buffer ()
    ;; Make a special "per session" backup at the first save of each
    ;; emacs session.
    (when (not buffer-backed-up)
      ;; Override the default parameters for per-session backups.
      (let ((backup-directory-alist '(("" . "~/.emacs_test.d/backup/per-session")))
            (kept-new-versions 3))
        (backup-buffer)))
    ;; Make a "per save" backup on each save.  The first save results in
    ;; both a per-session and a per-save backup, to keep the numbering
    ;; of per-save backups consistent.
    (let ((buffer-backed-up nil))
      (backup-buffer)))

  (add-hook 'before-save-hook  'force-backup-of-buffer)
#+END_SRC
*** Edit and reload config
Small function to easily configure and reload the configuration file.

#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file emacs-config-org-file))

  (defun config-custom-visit ()
    (interactive)
    (find-file emacs-config-custom-org-file))

  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name emacs-config-org-file)))
#+END_SRC
*** Save and exit buffer
#+BEGIN_SRC emacs-lisp
  (defun save-and-exit()
    "Simple convenience function.
      Saves the buffer of the current day's entry and kills the window
      Similar to org-capture like behavior"
    (interactive)
    (save-buffer)
    (kill-buffer-and-window))
  (global-set-key (kbd "C-x C-S-s") 'save-and-exit)
  (global-set-key (kbd "C-x C-M-S-s") 'org-save-all-org-buffers)
#+END_SRC
** Custom keystrokes
All (most) the custom key combinations that I use regularly.
#+BEGIN_SRC emacs-lisp
  ;; set up my own map for files, folder and windows
  (define-prefix-command 'z-map)
  (global-set-key (kbd "C-z") 'z-map)
  (define-key z-map (kbd "a") 'org-agenda)
  (define-key z-map (kbd "n") 'narrow-or-widen-dwim)
  (define-key z-map (kbd "C-t") 'toggle-transparency)

  ;; Grammarly
  (define-key z-map (kbd "g g") 'grammarly-pull)
  (define-key z-map (kbd "g p") 'grammarly-push)

  ;; Personal PDF annotation extraction workflow PDF highlight to org
  (define-key z-map (kbd "u") 'process-annotations)

  ;; Buffer movement
  (define-key z-map (kbd "<left>") 'shrink-window-horizontally)
  (define-key z-map (kbd "<right>") 'enlarge-window-horizontally)
  (define-key z-map (kbd "<down>") 'shrink-window)
  (define-key z-map (kbd "<up>") 'enlarge-window)
  (define-key z-map (kbd "C-<up>") 'buf-move-up)
  (define-key z-map (kbd "C-<down>") 'buf-move-down)
  (define-key z-map (kbd "C-<left>") 'buf-move-left)
  (define-key z-map (kbd "C-<right>") 'buf-move-right)
  (define-key z-map (kbd "C-r") 'rotate-layout)
  (define-key z-map (kbd "C-m v") 'rotate:main-vertical)
  (define-key z-map (kbd "C-m h") 'rotate:main-horizontal)
  (define-key z-map (kbd "C-e t") 'rotate:tiled)
  (define-key z-map (kbd "C-e v") 'rotate:even-vertical)
  (define-key z-map (kbd "C-e h") 'rotate:even-horizontal)

  ;; UNCOMMENT IF YOU'RE NOT ME :)
  (define-key z-map (kbd "z") (defun zshrcEdit () (interactive) (find-file zshrc-file)))
  (define-key z-map (kbd "s") (defun skhdEdit() (interactive) (find-file skhdrc-file)))
  (define-key z-map (kbd "k") (defun keyboardEdit() (interactive) (find-file qmk-keymap-file)))
  (define-key z-map (kbd "y") (defun yabaiEdit() (interactive) (find-file yabai-file)))
  (define-key z-map (kbd "q") (defun qutebrowserEdit() (interactive) (find-file qutebrowser-file)))

  ;; Bibfile and ref management files
  (define-key z-map (kbd "b") (defun bibOrgEdit() (interactive) (find-file bib-org-file)))
  (define-key z-map (kbd "C-b") (defun bibtexEdit() (interactive) (find-file references-bib-file)))

  ;; GTD files
  (define-key z-map (kbd "p") (defun work-GTD() (interactive) (find-file personal-gtd-file)))
  (define-key z-map (kbd "w") (defun personal-GTD() (interactive) (find-file work-gtd-file)))
  (define-key z-map (kbd "f") (defun phone-GTD() (interactive) (find-file phone-gtd-file)))
  (define-key z-map (kbd "t") (defun journalling() (interactive) (find-file journal-file)))
  (define-key z-map (kbd "o p") 'org-focus-private)
  (define-key z-map (kbd "o f") 'org-focus-phone)
  (define-key z-map (kbd "o w") 'org-focus-work)
  (define-key z-map (kbd "o a") 'org-focus-all-future)
  (define-key z-map (kbd "o P") 'org-focus-past)
  (define-key z-map (kbd "o A") 'org-focus-all)

  ;; Link to clipboard

  ;; Emacs config files
  (define-key z-map (kbd "E") 'config-custom-visit)
  (define-key z-map (kbd "r") 'config-reload)
  (define-key z-map (kbd "e") 'config-visit)

  ;; Timer
  (define-key z-map (kbd "k") 'show-msg-after-timer)

  ;; ORG extra keybinding
  ;; Store a reference link to an org mode location
  (global-set-key (kbd "C-c l") 'org-store-link)
  (define-key z-map (kbd "l") 'my/copy-idlink-to-clipboard)

  ;; Add an extra cursor above or below current cursor
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)

  ;; Remove an extra cursor above or below current cursor
  (global-set-key (kbd "C-,") 'mc/unmark-previous-like-this)
  (global-set-key (kbd "C-.") 'mc/unmark-next-like-this)

  ;; Skip a spot in adding a new cursor above or below
  (global-set-key (kbd "C-M-<") 'mc/skip-to-previous-like-this)
  (global-set-key (kbd "C-M->") 'mc/skip-to-next-like-this)

  ;; Mark all entries in current selection (useful if you want to rename a variable in the whole file)
  (global-set-key (kbd "C-M-,") 'mc/mark-all-like-this)

  ;; Create cursors on every line in selected area
  (global-set-key (kbd "C-M-.") 'mc/edit-lines)

  ;; Insert numbers with increased index for exery cursor (useful for lists)
  (global-set-key (kbd "C-;") 'mc/insert-numbers)

  ;; Same as numbers but then with letters
  (global-set-key (kbd "C-M-;") 'mc/insert-letters)

  ;; With control shift and a mouse-click add cursor
  (global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)

  ;; Kill whole line
  (global-set-key (kbd "C-S-k") 'kill-whole-line)

  ;; Go anywhere in just a few strokes
  (global-set-key (kbd "C-S-s") 'avy-goto-char)

  ;; Refile within same file
  (global-set-key (kbd "C-c w") 'org-refile-in-file)
#+END_SRC
** Diranged
Package to preview contents of a file in dired (C-x C-b) while scrolling
#+BEGIN_SRC emacs-lisp
  (let ((default-directory  "~/.emacs_test.d/custom/"))
    (normal-top-level-add-to-load-path '("."))
    (normal-top-level-add-subdirs-to-load-path))

  (use-package diranged
    :bind (:map dired-mode-map ("r" . diranged-mode)))

  (setq diranged-disable-on-quit t     ; disable diranged on quit-window
	diranged-kill-on-move t        ; cleanup spawed buffers as we go
	diranged-kill-on-exit t        ; cleanup spawed buffers on exit
	diranged-max-file-size 10      ; MB size limit for previewing files
	diranged-restore-windows t)    ; restore windows state on exit
#+END_SRC
** Encoding
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;
  ;;; set up unicode
  (prefer-coding-system       'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+END_SRC
** Exporting
*** Org to latex blank lines
Here we make a small adaption in exporting to latex file. A double newline is translated to a bigskip, thus creating an extra whitespace in the resulting pdf.
#+BEGIN_SRC emacs-lisp
  ;; replace \n\n with bigskip
  (defun my-replace-double-newline (backend)
    "replace multiple blank lines with bigskip"
    (interactive)
    (goto-char (point-min))
    (while (re-search-forward "\\(^\\s-*$\\)\n\n+" nil t)
      (replace-match "\n#+LATEX: \\par\\vspace{\\baselineskip}\\noindent\n" nil t)
      ;;(replace-match "\n#+LATEX: \\bigskip\\noindent\n" nil t)
      (forward-char 1)))

  (add-hook 'org-export-before-processing-hook 'my-replace-double-newline)
#+END_SRC
*** Export to word
Make sure that export (C-e) to odt, will be formatted to a .doc document for word.
#+BEGIN_SRC emacs-lisp
  ;; This setup is tested on Emacs 24.3 & Emacs 24.4 on Linux/OSX
  ;; org v7 bundled with Emacs 24.3
  (setq org-export-odt-preferred-output-format "doc")
  ;; org v8 bundled with Emacs 24.4
  (setq org-odt-preferred-output-format "doc")
  ;; BTW, you can assign "pdf" in above variables if you prefer PDF format
  ;; Only OSX need below setup
  (defun my-setup-odt-org-convert-process ()
    (setq process-string "/Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to %f%x --outdir %d %i")
    (interactive)
    (let ((cmd "/Applications/LibreOffice.app/Contents/MacOS/soffice"))
       (when (and (eq system-type 'darwin) (file-exists-p cmd))
         ;; org v7
         (setq org-export-odt-convert-processes '(("LibreOffice" "/Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to %f%x --outdir %d %i")))
         ;; org v8
         (setq org-odt-convert-processes '(("LibreOffice"  "/Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to %f%x --outdir %d %i"))))
       ))
   (my-setup-odt-org-convert-process)
#+END_SRC
*** Export to Markdown
#+BEGIN_SRC emacs-lisp
  (eval-after-load "org"
    '(require 'ox-md nil t))
#+END_SRC
*** Reveal.js
Provide the option to export (C-e) an org-file to a reveal presentation.
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
  :ensure ox-reveal)
  (setq org-reveal-mathjax t)
  (use-package htmlize :ensure t)
#+END_SRC
*** Export to subdirectory
Exporting brings about a lot of extra files and mess in the folder of your org file. This variable basically deletes all the extra trash that is made in order to provide you with a pdf file. Keep things nice and clean! :D
#+BEGIN_SRC emacs-lisp
  (setq org-latex-logfiles-extensions (quote ("lof" "lot" "tex~" "aux" "idx" "log" "out" "toc" "nav" "snm" "vrb" "dvi" "fdb_latexmk" "blg" "brf" "fls" "entoc" "ps" "spl" "bbl" "glo" "ilg" "ist" "ind")))
#+END_SRC
*** Beamer
#+BEGIN_SRC emacs-lisp
  (require 'ox-beamer)
#+END_SRC
** Gimmicks
Just some small functions that can be used for (almost) useless things.
*** Transparency
#+BEGIN_SRC emacs-lisp
  ;;(set-frame-parameter (selected-frame) 'alpha '(<active> . <inactive>))
  ;;(set-frame-parameter (selected-frame) 'alpha <both>)
  (set-frame-parameter (selected-frame) 'alpha '(100 . 100))
  (add-to-list 'default-frame-alist '(alpha . (100 . 100)))

  (defun toggle-transparency ()
     (interactive)
     (let ((alpha (frame-parameter nil 'alpha)))
       (set-frame-parameter
        nil 'alpha
        (if (eql (cond ((numberp alpha) alpha)
                       ((numberp (cdr alpha)) (cdr alpha))
                       ;; Also handle undocumented (<active> <inactive>) form.
                       ((numberp (cadr alpha)) (cadr alpha)))
                 100)
            '(95 . 95) '(100 . 100)))))
#+END_SRC
** Navigation
*** avy
Avy is a powerful search package that lets you quickly navigate to wherever in your screen you want to go.
#+BEGIN_SRC emacs-lisp
  (use-package avy :ensure t)
#+END_SRC
*** Multiple Cursors
Use multi cursor editing easily. For keybindings, see [[*Custom keystrokes][Custom keystrokes]].
#+BEGIN_SRC emacs-lisp
  (require 'multiple-cursors)
#+END_SRC
*** expand-region
#+BEGIN_SRC emacs-lisp
  ;;expand region
  (require 'expand-region)
  (global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC
** Org
*** Writing improvements
Some of the adjustments are *stolen* from [[https://explog.in/notes/writingsetup.html][this guy]]. It mainly revolves around using screenspace efficiently instead of randomly adding whitespace, or not displaying whitespace where there actually is whitespace.
#+BEGIN_SRC emacs-lisp
  (setq org-indent-indentation-per-level 1)             ;; Shorten the space on the left side with org headers
  (setq org-adapt-indentation nil)                      ;; Adapt indentation to outline node level. Set to nill as it takes up space.
  (setq org-hide-emphasis-markers t)                    ;; When making something bold *Hallo*, hide stars. Goes for all emphasis markers.
  (setq org-cycle-separator-lines 1)                    ;; Leave a single empty line between headers if there is one. Otherwise leave no room or make the empty lines belong to the previous header.
  (setq org-hide-leading-stars 't)                      ;; Hide the extra stars in front of a header (org-bullet displays nicer, but why add extra package)
  (customize-set-variable 'org-blank-before-new-entry
                          '((heading . nil)
                            (plain-list-item . nil)))   ;; Dont randomly remove newlines below headers
#+END_SRC
*** Image size
Make standard size for org images. Otherwise they can become gigantic!
#+BEGIN_SRC emacs-lisp
    (setq org-image-actual-width 600)
#+END_SRC
*** [#B] Priorities
#+BEGIN_SRC emacs-lisp
  (setq org-priority-highest ?A)
  (setq org-priority-default ?C)
  (setq org-priority-lowest ?E)
#+END_SRC
*** Org-babel
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t) (python . t) (shell . t) (dot . t)))
#+END_SRC
*** Org capture
When initializing an org-capture, it eats up basically your whole layout. This piece of code prevents that and just uses an existing window, albeit somewhat random as to which one is chosen.
#+BEGIN_SRC emacs-lisp
  (defun my-org-capture-place-template-dont-delete-windows (oldfun args)
    (cl-letf (((symbol-function 'delete-other-windows) 'ignore))
      (apply oldfun args)))

  (with-eval-after-load "org-capture"
    (advice-add 'org-capture-place-template :around 'my-org-capture-place-template-dont-delete-windows))
#+END_SRC
** Standards (minor modes and minor improvements)
*** Alter annoying defaults
Small defaults to be changed as minor improvements. The changes are summarized next to it.
#+BEGIN_SRC emacs-lisp
  (setq save-interprogram-paste-before-kill t) ;; Perpetuates system clipboard
  (setq scroll-conservatively 1)      ;; Keep from making huge jumps when scrolling
  (setq ring-bell-function 'ignore)   ;; Unable annoying sounds
  (setq visible-bell 1)               ;; disable annoying windows sound
  (setq inhibit-startup-message t)    ;; Hide the startup message
  (setq display-time-24hr-format t)   ;; Format clock
  (setq-default display-line-numbers 'relative) ;; Setting the line numbers
  (when window-system (global-hl-line-mode t)) ;; Get a current line shadow in IDE
  (defalias 'yes-or-no-p 'y-or-n-p)   ;; Replace yes questions to y
  (add-hook 'before-save-hook 'delete-trailing-whitespace) ;; I never want whitespace at the end of lines. Remove it on save.
  (setq sentence-end-double-space nil);; Start a new sentence with just a single space instead of 2
  (exec-path-from-shell-initialize)   ;; Fixes path issues on mac emacs.app so that same env of terminal is used
  (setq org-agenda-window-setup 'current-window) ;; When opening the agenda, open it in current window instead of messing up the layout
#+END_SRC
*** Hungry-delete
Deletes all whitespace with a single delete of backspace.
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC
*** Minor modes
Some minor modes that are turned on or off. Next to each, a short description is given of what it changes.
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)                  ;; Get rid of tool-bar
  (menu-bar-mode -1)                  ;; Git rid of menu
  (scroll-bar-mode -1)                ;; Get rid of scroll-bar
  (global-auto-revert-mode 1)         ;; Make sure that you're always looking at the latest version of a file. Change file when changed on disk
  (delete-selection-mode 1)           ;; Remove text from selection instead of just inserting text
  (display-time-mode 1)               ;; Set clock on lower right side
  ;; (electric-pair-mode t)              ;; Enable electric pair mode. It autocompletes certain pairs. E.g., (), {}, [], <>
  (global-subword-mode 1)             ;; Cause M-f to move forward per capitalization within a word. E.g., weStopAtEveryCapital
  (global-visual-line-mode 1)                ;; Make sure that lines do not disapear at the right side of the screen but wrap around
  (add-hook 'prog-mode-hook 'electric-pair-mode)
#+END_SRC
*** Popup kill-ring
Show options out of the kill ring instead of cycling through each option.
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
*** Which key
Provides options for keystrokes. Super useful!
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
*** TODOS
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keyword-faces
	'(
	  ("NEXT" . (:foreground "#05d3fc" :weight bold :box (:line-width 2 :style released-button)))
	  ("MEETING" . (:foreground "#b28e00" :weight bold :box (:line-width 2 :style released-button)))
	  ("DELEGATED" . (:foreground "#b28e00" :weight bold :box (:line-width 2 :style released-button)))
	  ("WAITING" . (:foreground "#fcca05" :weight bold :box (:line-width 2 :style released-button)))
	  ("FLEETING" . (:foreground "#f62af9" :weight bold :box (:line-width 2 :style released-button)))
	  ("PROJ" . (:foreground "#a768f9" :weight bold :box (:line-width 2 :style released-button)))
	  ("LONGTERM" . (:foreground "#c4013c" :weight bold :box (:line-width 2 :style released-button)))
	  ("CANCELED" . (:foreground "#fc4205" :weight bold :box (:line-width 2 :style released-button)))
	  ))

  (setq org-todo-keywords
	'((sequence "TODO(t/!)" "NEXT(n/!)" "DELEGATED(o)" "WAITING(w@/!)" "FLEETING(f)" "PROJ(p)" "MEETING(m)" "LONGTERM(l@/!)" "REPEAT(r)" "|" "CANCELED(c@/!)" "DONE(d/!)")))

  (setq org-log-repeat nil)
  (setq org-todo-repeat-to-state "REPEAT")
#+END_SRC
*** Coding
When programming I like my editor to try to help me with keeping parentheses balanced.
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
      :config
      (add-hook 'prog-mode-hook 'smartparens-mode))
#+END_SRC
*** Refile
#+BEGIN_SRC emacs-lisp
  (setq org-outline-path-complete-in-steps nil)
  (setq org-completion-use-ido nil)
  (setq org-refile-use-outline-path 't)
  (setq org-refile-allow-creating-parent-nodes 'confirm)

  (defun org-refile-in-file ()
    "Refile to a target within the current file."
    (interactive)
    (let ((org-refile-targets `(((,(buffer-file-name)) :maxlevel . 6))))
      (call-interactively 'org-refile)))

  (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
#+END_SRC
*** Crux
crux has useful functions extracted from Emacs Prelude. Set C-a to move to the first non-whitespace character on a line, and then to toggle between that and the beginning of the line.
#+BEGIN_SRC emacs-lisp
  (use-package crux
    :bind (("C-a" . crux-move-beginning-of-line)))
#+END_SRC
** Try package
Have the option to try packages without actually installing them. If you do

#+BEGIN_SRC
M-x try
#+END_SRC

It will give you the option to temporarily install the package. If you close and reopen emacs, the tried out package is removed.

#+BEGIN_SRC emacs-lisp
  (use-package try
      :ensure t)
#+END_SRC
** Visual
*** Beacon
Small package to provide an idea where in which buffer the cursor is atm by showing a small light in the current frame.
#+BEGIN_SRC emacs-lisp
  (use-package beacon
      :ensure t
      :init
      (beacon-mode 1))
#+END_SRC
*** rainbow
Visualize color codings. So RGB will be colored in its respective color.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :config
    (setq rainbow-x-colors nil)
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC

Make visual pairs of delimeters ({<[]>}) etc. Each level gets its own color so it's easy to spot which are pairs.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
*** Doom theme
This causes emacs to look a lot better overall. [[https://github.com/hlissner/emacs-doom-themes][This package]] makes the coloring and font decissions, so you don't have to. There is a seperate package for the mode-line (the line that containts the time and which file etc.)
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))

  (setq doom-modeline-buffer-file-name-style 'truncate-all)
#+END_SRC
*** all-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons :ensure t)
#+END_SRC
** Link to clipboard
#+BEGIN_SRC emacs-lisp
  (defun my/copy-idlink-to-clipboard() "Copy an ID link with the headline to killring, if no ID is there then create a new unique ID. This function works only in org-mode or org-agenda buffers.
  The purpose of this function is to easily construct id:-links to org-mode items. If its assigned to a key it saves you marking the text and copying to the killring."
	 (interactive)
	 (when (eq major-mode 'org-agenda-mode)
	   (org-agenda-show)
	   (org-agenda-goto))
	 (when (eq major-mode 'org-mode) ; do this only in org-mode buffers
	   (setq mytmphead (nth 4 (org-heading-components)))
	   (setq mytmpid (funcall 'org-id-get-create))
	   (setq mytmplink (format "[[id:%s][%s]]" mytmpid mytmphead)) (kill-new mytmplink)
	   (message "Copied %s to killring (clipboard)" mytmplink)
	   ))
#+END_SRC
** Clear checkboxes when done with repeated tasks
#+BEGIN_SRC emacs-lisp
  (defun org-reset-checkbox-state-maybe () "Reset all checkboxes in an entry
  if the `RESET_CHECK_BOXES' property is set" (interactive "∗")
  (if (org-entry-get (point) "RESET_CHECK_BOXES")
      (org-reset-checkbox-state-subtree)))
  (defun org-checklist ()
    (when (member org-state org-done-keywords)
      (org-reset-checkbox-state-maybe)))
  (defun my-clockfiles () (append org-agenda-files
				  (file-expand-wildcards "~/Dropbox/org/track∗.org")))
  (add-hook 'org-after-todo-state-change-hook 'org-checklist)
#+END_SRC
* Shortcuts and how-to's
Here I provide some common shortcuts that I tend to use or want to remember and other useful instructions.
** Shorthand notations
There are some shorthands for certain keys, these are as follows:
|-----------+----------------------------------------|
| Shorthand | Corresponding key                      |
|-----------+----------------------------------------|
| C         | Control                                |
| M         | Meta, option or alt (depending on OS)  |
| RET       | Return or enter                        |
| S         | Shift                                  |
| SPC       | Space bar                              |
| TAB       | Tab key                                |
| prefix    | C-u followed by the shortcut           |
| VERT      | This is a pipe sign |, it is described |
|           | like this since Org treats this as a   |
|           | new column                             |
|-----------+----------------------------------------|
** Emacs
*** General
|-----------+------------------------------------------|
| Shortcuts | Description                              |
|-----------+------------------------------------------|
| C-g       | Quit partially entered command           |
| C-_       | Undo                                     |
| C-x u     | Undo                                     |
| C-/       | Undo                                     |
| C-g C-/   | Undo in reverse direction (C-g reverses) |
| C-x C-s   | save                                     |
| C-x s     | Save some buffers                        |
| M-w       | copy                                     |
| C-w       | cut                                      |
| C-y       | paste                                    |
| C-x C-f   | Find a file                              |
| C-x C-c   | Quit Emacs                               |
| C-x C-=   | Zoom in                                  |
| C-x C--   | Zoom out                                 |
| C-s       | Search                                   |
| C-r       | Reverse search                           |
| M-=       | Show wordcount                           |
| C-SPC     | Marker                                   |
|-----------+------------------------------------------|
*** Navigation
|----------------+-----------------------------------------------------------------------|
| Shortcut       | Description                                                           |
|----------------+-----------------------------------------------------------------------|
| *Beginner*       |                                                                       |
|----------------+-----------------------------------------------------------------------|
| C-u PREFIX     | The "numeric argument" indicates how many times to repeat the command |
| C-v            | Move forward one screenful (next page)                                |
| M-v            | Move back one screenful (previous page)                               |
| C-u PREFIX C-v | Scroll text up by indicated number of lines                           |
| C-u PREFIX M-v | Scroll text down by indicated number of lines                         |
| C-f            | Move cursor a character to the right (forward)                        |
| C-b            | Move cursor a character to left (back)                                |
| M-f            | Move cursor forward one word                                          |
| M-b            | Move cursor back one word                                             |
| C-n            | Move cursor down one line (next)                                      |
| C-p            | Move cursor up one line (previous)                                    |
| C-a            | Move cursor to beginning of line                                      |
| C-e            | Move cursor to end of line                                            |
| M-a            | Move cursor to beginning of sentence                                  |
| M-e            | Move cursor to end of current or next sentence                        |
| M-}            | Move cursor to end or next paragraph                                  |
| M-{            | Move cursor to beginning or previous paragraph                        |
| C-l            | Move text around the cursor to the center of the screen               |
| C-l C-l        | Move text around the cursor to the top of the screen                  |
| C-l C-l C-l    | Move text around the cursor to the bottom of the screen               |
| C-u PREFIX C-l | Move text around the cursor to the specified line                     |
| M-<            | Move cursor to top of document                                        |
| M->            | Move cursor to end of document                                        |
| C-u C-SPC      | Move cursor back to previous position (after jump)                    |
| C-z c          | avy-goto-char, go to any character in the screen by following a code  |
|----------------+-----------------------------------------------------------------------|
| *Intermediate*   |                                                                       |
|----------------+-----------------------------------------------------------------------|
| M-g M-g        | Asks you a number and then goes to that line number                   |
|----------------+-----------------------------------------------------------------------|
*** Buffers
|-----------------------+----------------------------------------------------------------|
| Shortcut              | Description                                                    |
|-----------------------+----------------------------------------------------------------|
| C-x C-b               | Show list of currently existing buffers                        |
| C-x b                 | Switch to another buffer by typing its name                    |
| C-x o                 | Jump to other buffer                                           |
| C-x k                 | Kill buffer                                                    |
| C-x 0                 | Kill selected buffer                                           |
| C-x 1                 | Kill all buffers except selected one                           |
| C-x 2                 | Split selected buffer horizontally                             |
| C-x 3                 | Split selected buffer vertically                               |
| C-x 4 C-f BUFFER NAME | Open new window with desired buffer in it                      |
| C-x 5 2               | Open new frame                                                 |
| C-x 5 0               | Remove selected frame                                          |
| C-M-v                 | Scroll in non-selected buffer (without abandoning current one) |
|-----------------------+----------------------------------------------------------------|
*** Editing
|----------------+------------------------------------------------------------|
| Shortcut       | Description                                                |
|----------------+------------------------------------------------------------|
| <DEL>          | Delete the character before the cursor                     |
| C-d            | Delete the character after the cursor                      |
| M-<DEL>        | Kill the word before the cursor                            |
| M-d            | Kill the word after the cursor                             |
| C-k            | Kill from the cursor position to the end of the line       |
| M-k            | Kill from the cursor position to the end of the sentence   |
| C-0 C-k        | Kill from the cursor position to the beginning of the line |
| C-S-<DEL>      | Delete the whole line, regarless of cursor position        |
| C-u PREFIX C-k | Kills specified number of lines AND their contents         |
| * text *       | *Bolds* text                                                 |
| / text /       | /Italicizes/ text                                            |
| _ text _       | _Underlines_ text                                            |
| = text =       | Makes text =green= (without spaces)                          |
| ~ text ~       | Makes text ~orange~ (without spaces)                         |
|----------------+------------------------------------------------------------|
** Org
*** Regular ORG
|------------------+--------------------------------------------------------------|
| Shortcut         | Description                                                  |
|------------------+--------------------------------------------------------------|
| C-c n f          | Create new file                                              |
| C-RET            | Add headder                                                  |
| M-S-RET          | Add extra todo checklist item to a list                      |
| M-S-RET [@INDEX] | Add extra todo checklist item with desired numbering         |
| C-c C-t          | Jump straight to the right TODO keyword                      |
| C-LEFT / C-RIGHT | Cycle through TODO keywords                                  |
| C-c C-c          | Check the checkbox                                           |
| C-q              | Add a tagg to a header                                       |
| C-c C-x S-o      | Make a TODO tree ordered (i.e. cannot set DONE out of order) |
| C-c C-x C-c      | Change view to column view                                   |
| C-c C-c          | WHEN IN COLUMN VIEW: change back                          |
|------------------+--------------------------------------------------------------|
*** Timer and clocking
|-----------------+----------------------------------------------------------------------------------|
| Shortcut        | Description timer                                                                |
|-----------------+----------------------------------------------------------------------------------|
| C-c C-x 0       | Use a up counting times (when prepended with C-u it prompts for offset of timer) |
| C-c C-x ,       | Pause and resume timer (when prepended with C-u it stops timer)                  |
| C-c C-x .       | When running timer, insert timestamp H:MM:SS                                     |
| C-c C-x -       | When running timer, insert timestamp of form - H:MM:SS :: tekst                  |
|-----------------+----------------------------------------------------------------------------------|
| Shortcut        | Description clock                                                                |
|-----------------+----------------------------------------------------------------------------------|
| C-c C-x i       | Clock in                                                                         |
| C-c C-x o       | Clock out                                                                        |
| C-c C-x q       | Quit/cancel current clock                                                        |
| C-c C-x j       | Go to current clock or last running clock                                        |
| C-c C-x C-x     | Work again on last running clock                                                 |
| C-u C-c C-x C-x | Get list of previously used clocks and choose which to work on                   |
| l               | *IN AGENDA VIEW* to see clocked efforts at right timing                            |
| C-c C-x d       | Show overlay in which total work time is calculated                              |
| C-c C-c         | Remove overlay                                                                   |
|-----------------+----------------------------------------------------------------------------------|

*** Roam
|----------+-------------|
| Shortcut | Description |
|----------+-------------|
|----------+-------------|
*** Tables
Here are some shortcuts that I regularly use or want to have handy nearby.  For a more exhaustive list, check [[https://orgmode.org/manual/Built_002din-Table-Editor.html#Built_002din-Table-Editor][the org table manual]].

_How to make a table step by step:_
1. Write the headers of the columns separated by commas
2. Select the line with column names
3. C-c |
4. C-c RET
5. C-c -
6. Drag line using M-UP or M-DOWN

|------------------------+------------------------------------------------------------------------|
| Shortcut               | Description                                                            |
|------------------------+------------------------------------------------------------------------|
| *Re-aligning and motion* |                                                                        |
|------------------------+------------------------------------------------------------------------|
| C-c C-c                | Re-align without moving                                                |
| TAB                    | Re-align table, move to next field and create new row if needed        |
| RET                    | Move cursor to next row or create a row (useful with horizontal lines) |
| M-a or M-e             | Move to beginning or end of current field, or next field               |
| M-RET                  | Split line vertically on overflow of column (split row into 2)         |
|------------------------+------------------------------------------------------------------------|
| *Regions*                |                                                                        |
|------------------------+------------------------------------------------------------------------|
| M-RET                  | Split current field at point and paste what comes after to new line    |
|------------------------+------------------------------------------------------------------------|
| *Column and Row editing* |                                                                        |
|------------------------+------------------------------------------------------------------------|
| C-c RET                | Insert horizontal line                                                 |
| C-c -                  | Insert a horizontal line below, with prefix it is above                |
| C-c ^                  | Sort by column on point                                                |
| S-ARROW_KEY            | Move current cell in the direction of the used arrow key               |
| M-ARROW_KEY            | Move current column or row in the direction of the used arrow key      |
| M-S-LEFT or M-S-UP     | Kill current column or row, respectively                               |
| M-S-RIGHT or M-S-DOWN  | Add column or row                                                      |
|------------------------+------------------------------------------------------------------------|
| *Calculations*           |                                                                        |
|------------------------+------------------------------------------------------------------------|
| C-c +                  | You can paste (C-y) a column sum into a field                          |
| S-RET                  | Auto-increment downward is current field is a number or if current     |
|                        | is empty, copy the one from above.                                     |
|------------------------+------------------------------------------------------------------------|
| *Misc*                   |                                                                        |
|------------------------+------------------------------------------------------------------------|
| C-c VERT               | Create table or convert from region (csv style)                        |
| C-c `                  | Used if you want a seperate buffer to alter a field                    |
|------------------------+------------------------------------------------------------------------|
*** Exporting
*** Journal
All journal entries are registered in the Emacs Calendar. To see available journal entries do ~M-x calendar~. Bindings available in the =calendar-mode=:
|-----------+------------------------------------------------------------------------|
| Shortcut  | Description                                                            |
|-----------+------------------------------------------------------------------------|
| C-c C-c j | Use org-capture to start a new days entry and carry TODO's to this day |
| C-z C-t   | Go to todays entry                                                     |
| C-z C-j   | Make a new time-stamp in todays entry                                  |
| C-c C-f   | Go to next journal file                                                |
| C-c C-b   | Go to previoous journal file                                           |
|-----------+------------------------------------------------------------------------|
| j m       | mark entries in calendar                                               |
| j r       | view an entry in a new buffer.                                         |
| j d       | view an entry but do not switch to it.                                 |
| j n       | add a new entry into the day’s file (creates the file if not present). |
| j s w     | search in all entries of the current week.                             |
| j s m     | search in all entries of the current month.                            |
| j s y     | search in all entries of the current year.                             |
| j s f     | search in all entries of all time.                                     |
| j s F     | search in all entries in the future.                                   |
| [         | go to previous day with journal entries.                               |
| ]         | go to next day with journal entries.                                   |
|           |                                                                        |
|-----------+------------------------------------------------------------------------|
** Agenda
|--------------------+-------------------------------------|
| Shortcut           | Description                         |
|--------------------+-------------------------------------|
| C-u NUMBER C-z a a | Open agenda for next NUMBER of days |
| f                  | Move forward in agenda              |
| b                  | Move backwards in agenda            |
|--------------------+-------------------------------------|
** Archiving and note taking
|-------------+-------------------------------------|
| Shortcut    | Description                         |
|-------------+-------------------------------------|
| C-c C-x C-s | Archive current TODO tree           |
| C-c C-z     | Make a quick note in LOGBOOK drawer |
|             |                                     |
|-------------+-------------------------------------|

** Step by step instructions
_How to modify a config file or custom config file step by step:_
1. C-z E to open config file
2. Modify whatever you want
3. C-x Cs to save file
4. C-z r to reload the config file
_How to create a new folder saved in dropbox_
1. C-x C-f to create a new file
2. ~/ to go to home directory
3. ~/Dropbox to go to dropbox
4. /file_name
5. M-x RET RET to create a new directory (new folder) /or/ C-x C-s to create new file
