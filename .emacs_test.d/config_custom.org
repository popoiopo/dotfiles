#+TITLE: Emacs custom configuration
#+DESCRIPTION: An org-babel based emacs configuration
#+LANGUAGE: en
#+PROPERTY: results silent
* Personalization
Some personalization things.
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Bas Chatel" user-mail-address "bastiaan.chatel@gmail.com")
#+END_SRC
* File layout and paths
Here we provide important directories and files. For example, I use Dropbox to synchronise all my non-programming files and github for my programming projects. Furthermore the configuration files are written here for easy access in the z-map that is described later on.

|- Home directory (~/)
| |- Dotfiles
| |- Github
| | |- Programming folders
| |- Dropbox
| | |- Org-roam directory
| | | |- Ideas
| | | |- Knowledge_base
| | | |- Org-journal
| | | |- Papers_and_articles
| | | |- Personal
| | | |- Refs
| | | |- Snippets
| | | |- Work
| | |- Bibliography
| | |- PhD 

#+BEGIN_SRC emacs-lisp
  ;; General directories
  (setq dropbox-dir "~/Dropbox/")
  (setq github-dir "~/github/")

  ;; Configuration files
  (setq zshrc-file "~/.zshrc")
  (setq index-org-file (concat dropbox-dir "orgfiles/index.org"))
  (setq skhdrc-file "~/.skhdrc")
  (setq qmk-keymap-file "~/qmk_firmware/keyboards/keebio/iris/keymaps/popoiopo/keymap.c")
  (setq yabai-file "~/.yabairc")
  (setq qutebrowser-file "~/.qutebrowser/qutemacs.py")
  (setq references-bib-file (concat dropbox-dir "bibliography/references.bib"))

  ;; More specific files
  (setq roamnotes-path (concat dropbox-dir "RoamNotes/"))
  (setq roam-db-path "~/org-roam.db")
  (setq org-journal-path (concat roamnotes-path "org-journal/"))
#+END_SRC
* Configuration
** Custom file editing shortcuts
#+BEGIN_SRC emacs-lisp
  (define-key z-map (kbd "z") (defun zshrcEdit () (interactive) (find-file zshrc-file)))
  (define-key z-map (kbd "i") (defun indexEdit() (interactive) (find-file index-org-file)))
  (define-key z-map (kbd "s") (defun skhdEdit() (interactive) (find-file skhdrc-file)))
  (define-key z-map (kbd "k") (defun keyboardEdit() (interactive) (find-file qmk-keymap-file)))
  (define-key z-map (kbd "y") (defun yabaiEdit() (interactive) (find-file yabai-file)))
  (define-key z-map (kbd "q") (defun qutebrowserEdit() (interactive) (find-file qutebrowser-file)))
  (define-key z-map (kbd "b") (defun bibtexEdit() (interactive) (find-file references-bib-file)))
  (define-key z-map (kbd "C-j") 'org-journal-new-entry) 
  (define-key z-map (kbd "C-t") 'org-journal-today)
#+END_SRC
** Management - Knowledge
*** Citations
*** Org roam
One of the cornerstones of my knowledge management. This is based on Roam research or zettelkasten. 
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
        :ensure t
        :hook
        (after-init . org-roam-mode)
        :custom
        (org-roam-directory  roamnotes-path)
        (org-roam-db-location roam-db-path)
        :bind (:map org-roam-mode-map
                (("C-c n l" . org-roam)                          ;; Show backlinks in an extra buffer on the left
                 ("C-c n f" . orb-find-non-ref-file)             ;; Find your notes easily through the database
                 ("C-c n g" . org-roam-graph-show))              ;; Show your knowledge-base in graph shape
                :map org-mode-map
                (("C-c n i" . orb-insert-non-ref))               ;; Insert a link to a note
                (("C-c n I" . org-roam-insert-immediate))))      ;; Same as previous

  (setq org-roam-capture-templates
        '(
          ;; Alle informatie met referenties naar waar ik het vandaan heb. Dit wordt het grootste deel die concepten uitlegt met referenties naar snippets.
          ("k" "Knowledge base" plain (function org-roam--capture-get-point)
          "%?"
          :file-name "knowledge_base/%<%Y%m%d%H%M%S>-${slug}"
          :head "#+title: ${title}\n\n- tags :: [[file:20200729175519-knowledge_base.org][Knowledge base]]\n\n* "
          :unnarrowed t)

          ;; Hier staat alle informatie over mensen die ik ken; waar ik ze van ken, waar ze goed in zijn, verjaardag, etc. Dit functioneert als basis waar ik naar kan refereren als ik hulp nodig heb van iemand en ook voor leuk dat ik kan terug zien wat ik met die persoon heb gedaan vanuit de org-journal folder.
          ("p" "Personal" plain (function org-roam--capture-get-point)
            "%?"
            :file-name "personal/%<%Y%m%d%H%M%S>-${slug}"
            :head "#+title: ${title}\n\n- tags ::  [[file:20200729175551-personal.org][personal]]\n- birthday :: \n- Contact\n  - Phonenumber :: \n  - Email :: \n\n* "
            :unnarrowed t)

          ;; Hier komen alle interessante ideeën die niet perse met literatuur versterkt worden, niet goed uitgewerkt zijn of simpelweg een interessante notion is waar ik later iets mee kan.
          ("i" "Ideas" plain (function org-roam--capture-get-point)
            "%?"
            :file-name "ideas/%<%Y%m%d%H%M%S>-${slug}"
            :head "#+title: ${title}\n\n- tags :: [[file:20200729175615-ideas.org][Ideas]]\n\n* "
            :unnarrowed t)

          ;; Alle volledig uitgewerkte papers, blog posts, werken die ik doe (nog even nadenken of dit privé moet of niet, denk het wel want publicaties en protocols etc)
          ("a" "Papers and Articles" plain (function org-roam--capture-get-point)
            "%?"
            :file-name "papers_and_articles/%<%Y%m%d%H%M%S>-${slug}"
            :head "#+title: ${title}\n\n- tags :: [[file:20200729175758-papers_and_articles.org][papers_and_articles]]\n\n* "
            :unnarrowed t)

          ;; Alle volledig uitgewerkte papers, blog posts, werken die ik doe (nog even nadenken of dit privé moet of niet, denk het wel want publicaties en protocols etc)
          ("w" "Work" plain (function org-roam--capture-get-point)
            "%?"
            :file-name "work/%<%Y%m%d%H%M%S>-${slug}"
            :head "#+title: ${title}\n\n- tags :: [[file:20200902142233-work.org][work]]\n\n* "
            :unnarrowed t)

          ;; Hier staan, labelled per programmeer taal en functie (optimization, plotting, etc.), de snippets voor bepaalde methodes, wiskundige formules die uitgeprogrammeerd zijn etc.
          ("s" "Snippets" plain (function org-roam--capture-get-point)
            "%?"
            :file-name "snippets/%<%Y%m%d%H%M%S>-${slug}"
            :head "#+title: ${title}\n\n- tags :: [[file:20200729175823-snippets.org][snippets]]\n\n* "
            :unnarrowed t)
          )
        )

  ;; On search for notes, prepend its respective directory name
  (setq org-roam-tag-sources '(prop last-directory))
#+END_SRC
** Management - Workflow/project
*** Tags
#+BEGIN_SRC emacs-lisp
  (setq org-tag-alist '(("@short" . ?s) ("@medium" . ?m) ("@long" . ?l) ("@very long" . ?v)
                        ("@write" . ?w) ("@read" . ?r) ("@code" . ?c) ("@email" . ?e) ("@bellen" . ?b)
                        ("@kopen" . ?k) ("@terugbetalen" . ?t) ("@gaan" . ?g)))
#+END_SRC
*** Org Journal
A big part of my workflow. In the beginning of each day I create a journal entry that uses org-journal to take all my current TODOs to the new day. The new entry is filled with org-journal-file-header-func as a template, carries over all elements that are defined in org-journal-carryover-items and puts them under the TODO header.
#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :ensure t
    :defer t
    :config
    (setq org-journal-dir org-journal-path
	  org-journal-enable-agenda-integration t
	  org-journal-date-prefix "#+TITLE: "
	  org-journal-file-format "%Y-%m-%d.org"
	  org-journal-date-format "%A, %d %B %Y"))

  (setq org-journal-carryover-items "TODO=\"TODO\"|TODO=\"DOING\"|TODO=\"WAITING\"|TODO=\"FLEETING\"|TODO=\"LONGTERM\"")

  (defun org-journal-file-header-func (time)
    "Custom function to create journal header."
    (concat
      (pcase org-journal-file-type
	(`daily (concat "#+TITLE: " (format-time-string org-journal-date-format time) "\n#+STARTUP: folded\n* Tags and resources\n- tags :: \n- resources ::\n* TODOS\n")))))

  (setq org-journal-file-header 'org-journal-file-header-func)

  (require 'org-journal)

  (defun org-journal-find-location ()
    ;; Open today's journal, but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    (org-journal-new-entry t)
    ;; Position point on the journal's top-level heading so that org-capture
    ;; will add the new entry as a child entry.
    (goto-char (point-min)))

  (defun org-journal-save-entry-and-exit()
    "Simple convenience function.
    Saves the buffer of the current day's entry and kills the window
    Similar to org-capture like behavior"
    (interactive)
    (save-buffer)
    (kill-buffer-and-window))
  (define-key org-journal-mode-map (kbd "C-x C-s") 'org-journal-save-entry-and-exit)

  (defun org-journal-today ()
      (interactive)
      (org-journal-new-entry t))

  ;; Fix scheduling as it broke because of org-journal
  (define-key org-journal-mode-map (kbd "C-c s") 'org-journal-search)
  (add-hook 'org-mode-hook
	    (lambda () (local-set-key (kbd "C-c C-s") 'org-schedule)))
#+END_SRC
** Org
*** Org Capture
Org capture makes creating a template from org a little easier. It creates a new file in which a function can be called and the template will be inserted.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c")
                  'org-capture)

  (setq org-capture-templates '(("j" "Journal entry" entry (function org-journal-find-location)
                                 "* Day journal\n** %(format-time-string org-journal-time-format)%?")))
#+END_SRC
** All things blog publishing
*** Some setup
This setup has mostly been inspired by [[https://loomcom.com/blog/0110_emacs_blogging_for_fun_and_profit.html][loomcom]].
#+BEGIN_SRC emacs-lisp
  (setq bc_blog/project-dir "~/github/popoiopo.github.io/") ;; Define project directory
  (setq bc_blog/org-dir (concat bc_blog/project-dir "org/")) ;; Further define useful directory
  (setq org-publish-timestamp-directory (concat bc_blog/project-dir "cache/")) ;; Get cache dir
  (setq bc_blog/header-file (concat bc_blog/org-dir "pages/header.html")) ;; Set file header file
  (setq bc_blog/footer-file (concat bc_blog/org-dir "pages/footer.html")) ;; Set footer file

  (setq org-html-html5-fancy t) ;; Use HTML5 fancy

#+END_SRC
*** Custom functions
#+BEGIN_SRC emacs-lisp
  (defun bc_blog/header (arg)
      (with-temp-buffer
        (insert-file-contents bc_blog/header-file)
        (buffer-string)))

  (defun bc_blog/footer (arg)
      (with-temp-buffer
        (insert-file-contents bc_blog/footer-file)
        (buffer-string)))

#+END_SRC
*** ox-publish
#+BEGIN_SRC emacs-lisp

  (require 'ox-publish)
  (setq org-publish-project-alist
        '(
          ("bc-pages"
           :base-directory "~/github/popoiopo.github.io/org/"
           :exclude ".*drafts/.*"
           :exclude ".*pages/.*"
           :base-extension "org"
           :publishing-directory "~/github/popoiopo.github.io/"
           :recursive t
           :publishing-function org-twbs-publish-to-html
           :with-author t
           :with-creator nil
           :with-date t
           :section-numbers nil
           :with-title t
           :with-toc nil
           :with-drawers t
           :with-sub-superscript nil
           :html-link-home "/"
           :html-head nil
           :html-head-include-default-style nil
           :html-head-include-scripts nil
           :html-viewport nil
           :html-link-up ""
           :html-preamble bc_blog/header
           :html-postamble bc_blog/footer
           :auto-sitemap t
           :sitemap-sort-files anti-chronologically
           :sitemap-title "BC Blog"           
           :headline-levels 4             ; Just the default for this project.
           )

          ("bc-static"
           :base-directory "~/github/popoiopo.github.io/org/"
           :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|svg"
           :publishing-directory "~/github/popoiopo.github.io/"
           :recursive t
           :publishing-function org-publish-attachment
           )

          ("bc-presentations"
           :base-directory "~/github/popoiopo.github.io/Org_Presentations/"
           :base-extension "org"
           :publishing-directory "~/github/popoiopo.github.io/"
           :recursive t
           :publishing-function org-reveal-publish-to-reveal          
           )
          ("bc_blog" :components ("bc-pages" "bc-static" "bc-presentations"))
          ))

  ;; Custom id
  (require 'org-id)
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)

  (defun eos/org-custom-id-get (&optional pom create prefix)
    "Get the CUSTOM_ID property of the entry at point-or-marker POM.
     If POM is nil, refer to the entry at point. If the entry does
     not have an CUSTOM_ID, the function returns nil. However, when
     CREATE is non nil, create a CUSTOM_ID if none is present
     already. PREFIX will be passed through to `org-id-new'. In any
     case, the CUSTOM_ID of the entry is returned."
    (interactive)
    (org-with-point-at pom
      (let ((id (org-entry-get nil "CUSTOM_ID")))
        (cond
         ((and id (stringp id) (string-match "\\S-" id))
          id)
         (create
          (setq id (org-id-new (concat prefix "h")))
          (org-entry-put pom "CUSTOM_ID" id)
          (org-id-add-location id (buffer-file-name (buffer-base-buffer)))
          id)))))

  (defun eos/org-add-ids-to-headlines-in-file ()
    "Add CUSTOM_ID properties to all headlines in the
     current file which do not already have one."
    (interactive)
    (org-map-entries (lambda () (eos/org-custom-id-get (point) 'create))))

  ;; automatically add ids to captured headlines
  (add-hook 'org-capture-prepare-finalize-hook
            (lambda () (eos/org-custom-id-get (point) 'create)))
#+END_SRC
*** Ox-twbs
#+BEGIN_SRC emacs-lisp
  (require 'ox-twbs)
#+END_SRC

