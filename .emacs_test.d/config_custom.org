#+TITLE: Emacs custom configuration
#+DESCRIPTION: An org-babel based emacs configuration
#+LANGUAGE: en
#+PROPERTY: results silent
#+STARTUP: overview
* Personalization
Some personalization things.
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Bas Chatel" user-mail-address "bastiaan.chatel@gmail.com")
#+END_SRC
* File layout and paths
Here we provide important directories and files. For example, I use surfdrive to synchronise all my non-programming files and github for my programming projects. Furthermore the configuration files are written here for easy access in the z-map that is described later on.

|- Home directory (~/)
| |- Dotfiles
| |- Github
| | |- Programming folders
| |- surfdrive
| | |- Check dropbox README.org at root
* Configuration
** Management - Knowledge
*** Citations
Org ref is a powerful reference manager written fully in Elisp. Check [[https://github.com/jkitchin/org-ref][here]] to read about it.
#+BEGIN_SRC emacs-lisp
  (require 'org-ref)

  (setq reftex-default-bibliography '(references-bib-file))

  ;; see org-ref for use of these variables
  (setq org-ref-bibliography-notes (concat bib-folder-path "notes.org")
        org-ref-default-bibliography references-bib-file
        org-ref-pdf-directory bib-folder-path)

  (setq bibtex-completion-bibliography '(references-bib-file)
        bibtex-completion-library-path bib-folder-path
        bibtex-completion-pdf-field "file"
        bibtex-completion-notes-template-multiple-files
         (concat
          "#+title: ${title}\n"
          "#+roam_key: cite:${=key=}\n"
          "* TODO Notes\n"
          ":PROPERTIES:\n"
          ":Custom_ID: ${=key=}\n"
          ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
          ":AUTHOR: ${author-abbrev}\n"
          ":JOURNAL: ${journaltitle}\n"
          ":DATE: ${date}\n"
          ":YEAR: ${year}\n"
          ":DOI: ${doi}\n"
          ":URL: ${url}\n"
          ":END:\n\n")
        bibtex-completion-notes-path bib-folder-path)

  ;; open pdf with system pdf viewer (works on mac)
  (setq bibtex-completion-pdf-open-function
    (lambda (fpath)
      (start-process "open" "*open*" "open" fpath)))

  (setq org-latex-pdf-process (list "latexmk -shell-escape -bibtex -f -pdf %f"))
  (setq org-latex-prefer-user-labels t)

  ;; Making emacs find latex (so that C-c C-x C-l works on orgmode)
  (setenv "PATH" (concat ":/Library/TeX/texbin/" (getenv "PATH")))
  (add-to-list 'exec-path "/Library/TeX/texbin/")
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.5))

#+END_SRC
*** PDF annotations to org
#+BEGIN_SRC emacs-lisp
  (defun process-annotations ()
    (interactive)
    (let* ((default-directory "~/surfdrive/bibliography"))
      (shell-command "python runAllAnnot.py")
      (org-roam-db-build-cache)))
#+END_SRC
*** Org roam
One of the cornerstones of my knowledge management. This is based on Roam research or zettelkasten.
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
	:ensure t
	:hook
	(org-load . org-roam-mode)
	:custom
	(org-roam-directory roamnotes-path)
	(org-roam-db-location roam-db-path)
	:bind (:map org-roam-mode-map
		(("C-c n l" . org-roam)                          ;; Show backlinks in an extra buffer on the left
		 ("C-c n f" . org-roam-find-file)             ;; Find your notes easily through the database
		 ("C-c n g" . org-roam-graph-show))              ;; Show your knowledge-base in graph shape
		:map org-mode-map
		(("C-c n i" . org-roam-insert))               ;; Insert a link to a note
		(("C-c n I" . org-roam-insert-immediate))))      ;; Same as previous

  ;; (setq org-roam-capture-templates
  ;; 	'(("k" "Knowledge base" plain (function org-roam-capture--get-point)
  ;; 	   :file-name "knowledge_base/%<%Y%m%d%H%M>-${slug}"
  ;; 	   :head "#+title: ${title}\n#+author: %(concat user-full-name)\n#+email: %(concat user-mail-address)\n#+created: %(format-time-string \"[%Y-%m-%d %H:%M]\")\n#+roam_tags: %^{roam_tags}\n\nsource: \n\n%?"
  ;; 	   :unnarrowed t)
  ;; 	  ("p" "personal" plain (function org-roam-capture--get-point)
  ;; 	   :file-name "personal/%<%Y%m%d%H%M>-${slug}"
  ;; 	   :head "#+title: ${title}\n#+author: %(concat user-full-name)\n#+email: %(concat user-mail-address)\n#+created: %(format-time-string \"[%Y-%m-%d %H:%M]\")\n#+roam_tags:\n\n%?"
  ;; 	   :unnarrowed t)
  ;; 	  ("s" "snippets" plain (function org-roam-capture--get-point)
  ;; 	   :file-name "snippets/%<%Y%m%d%H%M>-${slug}"
  ;; 	   :head "#+title: ${title}\n#+author: %(concat user-full-name)\n#+email: %(concat user-mail-address)\n#+created: %(format-time-string \"[%Y-%m-%d %H:%M]\")\n#+roam_tags:\n\n%?"
  ;; 	   :unnarrowed t)))
  ;; ;;       '(
  ;; ;; 	;; Alle informatie met referenties naar waar ik het vandaan heb. Dit wordt het grootste deel die concepten uitlegt met referenties naar snippets.
  ;; 	("k" "Knowledge base" plain (function org-roam--capture-get-point)
  ;; 	"%?"
  ;; 	:file-name "knowledge_base/%<%Y%m%d%H%M%S>-${slug}"
  ;; 	:head "#+title: ${title}\n\n- tags :: [[file:20200729175519-knowledge_base.org][Knowledge base]]\n\n* "
  ;; 	:unnarrowed t)))

  ;; ;; 	;
					  ; Hier staat alle informatie over mensen die ik ken; waar ik ze van ken, waar ze goed in zijn, verjaardag, etc. Dit functioneert als basis waar ik naar kan refereren als ik hulp nodig heb van iemand en ook voor leuk dat ik kan terug zien wat ik met die persoon heb gedaan vanuit de org-journal folder.
  ;; 	("p" "Personal" plain (function org-roam--capture-get-point)
  ;; 	  "%?"
  ;; 	  :file-name "personal/%<%Y%m%d%H%M%S>-${slug}"
  ;; 	  :head "#+title: ${title}\n\n- tags ::  [[file:20200729175551-personal.org][personal]]\n- birthday :: \n- Contact\n  - Phonenumber :: \n  - Email :: \n\n* "
  ;; 	  :unnarrowed t)

  ;; 	;; Alle volledig uitgewerkte papers, blog posts, werken die ik doe (nog even nadenken of dit privé moet of niet, denk het wel want publicaties en protocols etc)
  ;; 	("a" "Papers and Articles" plain (function org-roam--capture-get-point)
  ;; 	  "%?"
  ;; 	  :file-name "papers_and_articles/%<%Y%m%d%H%M%S>-${slug}"
  ;; 	  :head "#+title: ${title}\n\n- tags :: [[file:20200729175758-papers_and_articles.org][papers_and_articles]]\n\n* "
  ;; 	  :unnarrowed t)

  ;; 	;; Alle volledig uitgewerkte papers, blog posts, werken die ik doe (nog even nadenken of dit privé moet of niet, denk het wel want publicaties en protocols etc)
  ;; 	("w" "Work" plain (function org-roam--capture-get-point)
  ;; 	  "%?"
  ;; 	  :file-name "work/%<%Y%m%d%H%M%S>-${slug}"
  ;; 	  :head "#+title: ${title}\n\n- tags :: [[file:20200902142233-work.org][work]]\n\n* "
  ;; 	  :unnarrowed t)

  ;; 	;; Hier staan, labelled per programmeer taal en functie (optimization, plotting, etc.), de snippets voor bepaalde methodes, wiskundige formules die uitgeprogrammeerd zijn etc.
  ;; 	("s" "Snippets" plain (function org-roam--capture-get-point)
  ;; 	  "%?"
  ;; 	  :file-name "snippets/%<%Y%m%d%H%M%S>-${slug}"
  ;; 	  :head "#+title: ${title}\n\n- tags :: [[file:20200729175823-snippets.org][snippets]]\n\n* "
  ;; 	  :unnarrowed t)
  ;; 	)
  ;;       )

  ;; On search for notes, prepend its respective directory name
  (setq org-roam-tag-sources '(prop last-directory))
#+END_SRC
** Management - Workflow/project
*** Tags
#+BEGIN_SRC emacs-lisp
  (setq org-tag-alist '(("CODING" . ?c) ("PHONING" . ?p) ("EMAILING" . ?e) ("WRITING" . ?w) ("THINKING" . ?t) ("READING" . ?r) ("DOING" . ?d) ("HEALTH" . ?h)))
#+END_SRC
*** Agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '(("~/surfdrive/roam_notes/gtd/work.org")
			   ("~/surfdrive/roam_notes/gtd/personal.org")
			   ("~/surfdrive/roam_notes/gtd/phone.org")))

  (defun org-focus-private() "Set focus on private things."
	 (interactive)
	 (setq org-agenda-files '("~/surfdrive/roam_notes/gtd/personal.org")))
  (defun org-focus-phone() "Set focus on things on mobile."
	 (interactive)
	 (setq org-agenda-files '("~/surfdrive/roam_notes/gtd/phone.org")))
  (defun org-focus-work() "Set focus on work things."
	 (interactive)
	 (setq org-agenda-files '("~/surfdrive/roam_notes/gtd/work.org")))
  (defun org-focus-past() "Set focus on past things."
	 (interactive)
	 (setq org-agenda-files '("~/surfdrive/roam_notes/gtd/work.org_archive" "~/surfdrive/roam_notes/gtd/personal.org_archive")))
  (defun org-focus-all-future() "Set focus on all future things."
	 (interactive)
	 (setq org-agenda-files '("~/surfdrive/roam_notes/gtd/work.org" "~/surfdrive/roam_notes/gtd/phone.org" "~/surfdrive/roam_notes/gtd/personal.org")))
  (defun org-focus-all() "Set focus on all things."
	 (interactive)
	 (setq org-agenda-files '("~/surfdrive/roam_notes/gtd/work.org" "~/surfdrive/roam_notes/gtd/phone.org" "~/surfdrive/roam_notes/gtd/personal.org" "~/surfdrive/roam_notes/gtd/work.org_archive" "~/surfdrive/roam_notes/gtd/personal.org_archive")))
#+END_SRC
*** Org Journal
A big part of my workflow. In the beginning of each day I create a journal entry that uses org-journal to take all my current TODOs to the new day. The new entry is filled with org-journal-file-header-func as a template, carries over all elements that are defined in org-journal-carryover-items and puts them under the TODO header.
#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :ensure t
    :defer t
    :config
    (setq org-journal-dir org-journal-path
	  org-journal-date-prefix "#+TITLE: "
	  org-journal-file-format "%Y-%m-%d.org"
	  org-journal-date-format "%A, %d %B %Y"))

  (setq org-journal-carryover-items "TODO=\"TODO\"|TODO=\"DOING\"|TODO=\"WAITING\"|TODO=\"FLEETING\"|TODO=\"LONGTERM\"|TODO=\"REPEAT\"")

  (defun org-journal-file-header-func (time)
    "Custom function to create journal header."
    (concat
      (pcase org-journal-file-type
	(`daily (concat "#+TITLE: " (format-time-string org-journal-date-format time) "\n#+STARTUP: folded\n* Tags and resources\n- tags :: \n- resources ::\n* TODOS\n")))))

  (setq org-journal-file-header 'org-journal-file-header-func)

  (require 'org-journal)

  (defun org-journal-find-location ()
    ;; Open today's journal, but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    (org-journal-new-entry t)
    ;; Position point on the journal's top-level heading so that org-capture
    ;; will add the new entry as a child entry.
    (goto-char (point-min)))

  (defun org-journal-today ()
      (interactive)
      (org-journal-new-entry t))

  ;; Fix scheduling as it broke because of org-journal
  (add-hook 'org-mode-hook
	    (lambda () (local-set-key (kbd "C-c C-s") 'org-schedule)))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/github/")
      (setq projectile-project-search-path '("~/github/")))
    (setq projectile-switch-project-action #'projectile-dired))
#+END_SRC
** PDF tools
#+BEGIN_SRC emacs-lisp
  (pdf-tools-install)
  (pdf-loader-install)
#+END_SRC
** Org
*** Org Capture
Org capture makes creating a template from org a little easier. It creates a new file in which a function can be called and the template will be inserted.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c")
		  'org-capture)

  (setq org-capture-templates '(("j" "Journal entry" entry (file+olp+datetree
							    "~/surfdrive/roam_notes/org-journal/2021.org")
				 (file "~/.emacs_test.d/capture/journal.txt")
				 :empty-lines-after 1)
				("s" "Start of the day Journal entry" entry (file+olp+datetree
							      "~/surfdrive/roam_notes/org-journal/2021.org")
				   (file "~/.emacs_test.d/capture/day_start_journal.txt")
				   :empty-lines-after 1)
				("r" "Reading entry" entry (file+headline
							    "~/surfdrive/roam_notes/gtd/work.org" "Leeslijst")
				 (file "~/.emacs_test.d/capture/reading.txt")
				 :empty-lines-after 1)
				("t" "TODO" entry (file
						   "~/surfdrive/roam_notes/gtd/work.org")
				 (file "~/.emacs_test.d/capture/todo.txt")
				 :empty-lines-after 0)
				("b" "BibEntry" entry (file+headline
						       "~/surfdrive/roam_notes/papers_and_articles/references.org" "New")
				 (file "~/.emacs_test.d/capture/refE.txt")
				 :empty-lines-after 1)
				 ))
#+END_SRC
** All things blog publishing

*** Some setup
This setup has mostly been inspired by [[https://loomcom.com/blog/0110_emacs_blogging_for_fun_and_profit.html][loomcom]].
#+BEGIN_SRC emacs-lisp
  (setq bc_blog/project-dir "~/github/popoiopo.github.io/") ;; Define project directory
  (setq bc_blog/org-dir (concat bc_blog/project-dir "org/")) ;; Further define useful directory
  (setq org-publish-timestamp-directory (concat bc_blog/project-dir "cache/")) ;; Get cache dir
  (setq bc_blog/header-file (concat bc_blog/org-dir "pages/header.html")) ;; Set file header file
  (setq bc_blog/footer-file (concat bc_blog/org-dir "pages/footer.html")) ;; Set footer file

  (setq org-html-html5-fancy t) ;; Use HTML5 fancy

#+END_SRC
*** Custom functions
#+BEGIN_SRC emacs-lisp
  (defun bc_blog/header (arg)
      (with-temp-buffer
        (insert-file-contents bc_blog/header-file)
        (buffer-string)))

  (defun bc_blog/footer (arg)
      (with-temp-buffer
        (insert-file-contents bc_blog/footer-file)
        (buffer-string)))

#+END_SRC
*** ox-publish
#+BEGIN_SRC emacs-lisp

  (require 'ox-publish)
  (setq org-publish-project-alist
        '(
          ("bc-pages"
           :base-directory "~/github/popoiopo.github.io/org/"
           :exclude ".*drafts/.*"
           :exclude ".*pages/.*"
           :base-extension "org"
           :publishing-directory "~/github/popoiopo.github.io/"
           :recursive t
           :publishing-function org-twbs-publish-to-html
           :with-author t
           :with-creator nil
           :with-date t
           :section-numbers nil
           :with-title t
           :with-toc nil
           :with-drawers t
           :with-sub-superscript nil
           :html-link-home "/"
           :html-head nil
           :html-head-include-default-style nil
           :html-head-include-scripts nil
           :html-viewport nil
           :html-link-up ""
           :html-preamble bc_blog/header
           :html-postamble bc_blog/footer
           :auto-sitemap t
           :sitemap-sort-files anti-chronologically
           :sitemap-title "BC Blog"
           :headline-levels 4             ; Just the default for this project.
           )

          ("bc-static"
           :base-directory "~/github/popoiopo.github.io/org/"
           :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|svg"
           :publishing-directory "~/github/popoiopo.github.io/"
           :recursive t
           :publishing-function org-publish-attachment
           )

          ("bc-presentations"
           :base-directory "~/github/popoiopo.github.io/Org_Presentations/"
           :base-extension "org"
           :publishing-directory "~/github/popoiopo.github.io/"
           :recursive t
           :publishing-function org-reveal-publish-to-reveal
           )
          ("bc_blog" :components ("bc-pages" "bc-static" "bc-presentations"))
          ))

  ;; Custom id
  (require 'org-id)
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)

  (defun eos/org-custom-id-get (&optional pom create prefix)
    "Get the CUSTOM_ID property of the entry at point-or-marker POM.
     If POM is nil, refer to the entry at point. If the entry does
     not have an CUSTOM_ID, the function returns nil. However, when
     CREATE is non nil, create a CUSTOM_ID if none is present
     already. PREFIX will be passed through to `org-id-new'. In any
     case, the CUSTOM_ID of the entry is returned."
    (interactive)
    (org-with-point-at pom
      (let ((id (org-entry-get nil "CUSTOM_ID")))
        (cond
         ((and id (stringp id) (string-match "\\S-" id))
          id)
         (create
          (setq id (org-id-new (concat prefix "h")))
          (org-entry-put pom "CUSTOM_ID" id)
          (org-id-add-location id (buffer-file-name (buffer-base-buffer)))
          id)))))

  (defun eos/org-add-ids-to-headlines-in-file ()
    "Add CUSTOM_ID properties to all headlines in the
     current file which do not already have one."
    (interactive)
    (org-map-entries (lambda () (eos/org-custom-id-get (point) 'create))))

  ;; automatically add ids to captured headlines
  (add-hook 'org-capture-prepare-finalize-hook
            (lambda () (eos/org-custom-id-get (point) 'create)))
#+END_SRC
*** Ox-twbs
#+BEGIN_SRC emacs-lisp
  (require 'ox-twbs)
#+END_SRC
*** HUGO blogging
#+BEGIN_SRC emacs-lisp
  (use-package ox-hugo
    :ensure t            ;Auto-install the package from Melpa (optional)
    :after ox)

  (setq HUGO_BASE_DIR "~/github/blog/blog/")
#+END_SRC
** Programming
*** Python
**** Pyvenv
#+BEGIN_SRC emacs-lisp
  (use-package pyvenv
    :ensure t
    :init
    (setenv "WORKON_HOME" "~/.pyenv/versions"))
#+END_SRC
**** Blacken
Black is an opinionated pyton formatter. Install with pip install black so the command line tool is available.
#+BEGIN_SRC emacs-lisp
  (use-package blacken
    :config
    (add-hook 'python-mode-hook 'blacken-mode))
#+END_SRC
**** Move line
#+BEGIN_SRC emacs-lisp
  (defun move-line (n)
    "Move the current line up or down by N lines."
    (interactive "p")
    (setq col (current-column))
    (beginning-of-line) (setq start (point))
    (end-of-line) (forward-char) (setq end (point))
    (let ((line-text (delete-and-extract-region start end)))
      (forward-line n)
      (insert line-text)
      ;; restore point to original column in moved line
      (forward-line -1)
      (forward-char col)))

  (defun move-line-up (n)
    "Move the current line up by N lines."
    (interactive "p")
    (move-line (if (null n) -1 (- n))))

  (defun move-line-down (n)
    "Move the current line down by N lines."
    (interactive "p")
    (move-line (if (null n) 1 n)))

  (global-set-key (kbd "M-<up>") 'move-line-up)
  (global-set-key (kbd "M-<down>") 'move-line-down)
#+END_SRC
**** Elpy
Set python shell interpreter.
#+BEGIN_SRC emacs-lisp
  (advice-add 'elpy-shell--insert-and-font-lock
	      :around (lambda (f string face &optional no-font-lock)
			(if (not (eq face 'comint-highlight-input))
			    (funcall f string face no-font-lock)
			  (funcall f string face t)
			  (python-shell-font-lock-post-command-hook))))

  (advice-add 'comint-send-input
	      :around (lambda (f &rest args)
			(if (eq major-mode 'inferior-python-mode)
			    (cl-letf ((g (symbol-function 'add-text-properties))
				      ((symbol-function 'add-text-properties)
				       (lambda (start end properties &optional object)
					 (unless (eq (nth 3 properties) 'comint-highlight-input)
					   (funcall g start end properties object)))))
			      (apply f args))
			  (apply f args))))
  (company-quickhelp-mode)
  (eval-after-load 'company
    '(define-key company-active-map (kbd "C-c h") #'company-quickhelp-manual-begin))
#+END_SRC
**** Jupyter
#+BEGIN_SRC emacs-lisp
  (use-package jupyter
    :init
    (setq jupyter-eval-use-overlays t))
#+END_SRC
** Elpy
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
#+END_SRC
** Expand region
#+BEGIN_SRC emacs-lisp
  ;;expand region
  (require 'expand-region)
  (global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC
** Emacs grammarly
#+BEGIN_SRC emacs-lisp
  (defun grammarly-push ()
    "Save region to a tempfile and run Grammarly on it."
    (interactive)
    (kill-region (region-beginning) (region-end))
    ;;(insert "<<here>>")
    (call-process-shell-command "osascript ~/.emacs_test.d/plugins/emacs-grammarly/push.scpt")
    )

  (defun grammarly-pull()
    "Save region to a tempfile and run Grammarly on it."
    (interactive)
    (call-process-shell-command "osascript ~/.emacs_test.d/plugins/emacs-grammarly/pull.scpt")
    (yank)
    )

#+END_SRC
** Fill table
Awesome way to make the tables fit the screen by filling the rows and columns, check [[https://github.com/casouri/ftable][here for more info]]
#+BEGIN_SRC emacs-lisp
  (load-file "~/.emacs_test.d/plugins/ftable/ftable.el")
  (setq ftable-fill-column 50)
#+END_SRC
** Timer
#+BEGIN_SRC emacs-lisp
  (defun show-msg-after-timer ()
    "Show a message after timer expires. Based on run-at-time and can understand time like it can."
    (interactive)
    (let* ((msg-to-show (read-string "Enter msg to show: "))
	   (time-duration (number-to-string (* 60 (string-to-number (read-string "Time? "))))))
      (message (concat "Timer will run for " time-duration " seconds."))
      (run-at-time time-duration nil #'message-box msg-to-show)
      (run-at-time time-duration nil 'shell-command "afplay ~/.emacs_test.d/timer-sound.wav")))
#+END_SRC
** YEQuake
#+BEGIN_SRC emacs-lisp
  (setq yequake-frames
	'(("work" .
	   ((width . 0.75)
	    (height . 0.5)
	    (buffer-fns . ("~/surfdrive/roam_notes/gtd/work.org"
			   split-window-horizontally
			   "*scratch*"))
	    (frame-parameters . ((undecorated . t)))))
	  ("org-capture"
	   (buffer-fns . (yequake-org-capture))
	   (width . 0.75)
	   (height . 0.5)
	   (alpha . 0.95))))
#+END_SRC
* Unicode shorts
#+BEGIN_SRC emacs-lisp
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)

  ;; set keys to type Unicode
  (define-key key-translation-map (kbd "<f9> <down>") (kbd "↓"))
  (define-key key-translation-map (kbd "<f9> <left>") (kbd "←"))
  (define-key key-translation-map (kbd "<f9> <right>") (kbd "→"))
  (define-key key-translation-map (kbd "<f9> <up>") (kbd "↑"))
#+END_SRC
