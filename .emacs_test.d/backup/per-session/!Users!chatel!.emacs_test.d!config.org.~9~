#+TITLE: Emacs configuration
#+DESCRIPTION: An org-babel based emacs configuration
#+LANGUAGE: en
#+PROPERTY: results silent
* Configuration
** Autocompletions
*** Company (autocompletion framework)
Company is a text completion framework for Emacs. The name stands for "complete anything". It uses pluggable back-ends and front-ends to retrieve and display completion candidates. See documentation on [[http://company-mode.github.io/][this site]].
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
*** Electric pairing
Automatically pair the following elements on autocorrect. This is enabled in the [[*Standards (minor modes and minor improvements)][Standards (minor modes and minor improvements)]] through electric-pair-mode.

#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
                              (?\( . ?\))
                              (?\[ . ?\])
                              (?\" . ?\")
                              (?\{ . ?\})
                              (?\< . ?\>)
                              ))
#+END_SRC
*** IDO autocomplete filename searches
Ivy takes care of autocompleting filenames in the minibuffer at the bottom of the screen. It also keeps typing paths to a minimum as a folder is just an enter away.
#+BEGIN_SRC emacs-lisp
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq enable-recursive-minibuffers t)
  (global-set-key "\C-s" 'swiper)
#+END_SRC

Makes sure that M-x also generates suggestions. Otherwise you'd have to remember everything and not get autocompleted in M-x functions. Amx is the newer version of smex.
#+BEGIN_SRC emacs-lisp
  (use-package amx
    :ensure t
    :after ivy
    :custom
    (amx-backend 'auto)
    (ams-save-file "~/.emacs_test.d/amx-items")
    (amx-history-length 50)
    (amx-show-key-bindings nil)
    :config
    (amx-mode 1))
#+END_SRC
*** Yassnippet
Yassnippet is the templating system that is used. It creates a folder called snippets in which you can make a folder for each major mode you'd want a template for. E.g., python can have a few snippets to prettyfie a matplotlib graph, or org can have a template for exporting to a latex article or an html webpage.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config (use-package yasnippet-snippets
              :ensure t)
    (yas-reload-all))
  (yas-global-mode 1)
#+END_SRC
** Buffers
All things buffer related
*** Buffer-move
Be able to swap buffers. See [[*Custom keystrokes][Custom keystrokes]] for shortcuts (buf-move-xxx).
#+BEGIN_SRC emacs-lisp
(use-package buffer-move
  :ensure t)
#+END_SRC
*** Ibuffer
Just a new buffer that lists the open buffers. It provides easy ways to close multiple buffers at once and navigate through them.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
  (setq ibuffer-expert t)
#+END_SRC
*** Killing buffers
**** Always kill current buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC
**** Kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
#+END_SRC
*** Narrowing
Function to easily narrow and widen an area of code. If you select a piece of text, call this function, it will create a buffer with just that in it. This makes searching, or exporting just a part of something much easier.
#+BEGIN_SRC emacs-lisp
  (defun narrow-or-widen-dwim (p)
    "Widen if buffer is narrowed, narrow-dwim otherwise.
  Dwim means: region, org-src-block, org-subtree, or
  defun, whichever applies first. Narrowing to
  org-src-block actually calls `org-edit-src-code'.

  With prefix P, don't widen, just narrow even if buffer
  is already narrowed."
    (interactive "P")
    (declare (interactive-only))
    (cond ((and (buffer-narrowed-p) (not p)) (widen))
          ((region-active-p)
           (narrow-to-region (region-beginning)
                             (region-end)))
          ((derived-mode-p 'org-mode)
           ;; `org-edit-src-code' is not a real narrowing
           ;; command. Remove this first conditional if
           ;; you don't want it.
           (cond ((ignore-errors (org-edit-src-code) t)
                  (delete-other-windows))
                 ((ignore-errors (org-narrow-to-block) t))
                 (t (org-narrow-to-subtree))))
          ((derived-mode-p 'latex-mode)
           (LaTeX-narrow-to-environment))
          (t (narrow-to-defun))))
#+END_SRC
*** Switch to previous buffer
Small function to switch to previously used buffer.
#+BEGIN_SRC emacs-lisp
  (defun er-switch-to-previous-buffer ()
    "Switch to previously open buffer.
     Repeated invocations toggle between the two most recently open buffers."
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer))))

  (global-set-key (kbd "C-c b") #'er-switch-to-previous-buffer)
#+END_SRC
*** switchwindow
Make switching buffer with C-x o easier. It provides you with shortcuts on the homerow to which buffer you want to go. Otherwise, you'd need to cycle through them which is aweful if you have multiple buffers on the screen.
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "h" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
*** Toggle fullscreen buffer
When using multiple buffers at the same time, sometimes it's nice to toggle a single buffer as fullscreen.
#+BEGIN_SRC emacs-lisp
  (defun toggle-maximize-buffer () "Maximize buffer"
    (interactive)
    (if (= 1 (length (window-list)))
        (jump-to-register '_) 
      (progn
        (window-configuration-to-register '_)
        (delete-other-windows))))
  (global-set-key (kbd "C-M-f") 'toggle-maximize-buffer)
#+END_SRC
*** window splitting function
If you split the window into two buffers, follow the new buffer. You make a new one to work in there right?!
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
** Custom functions
*** Backup files
Here we set where each file is backed up, how many versions of each file is backed
#+BEGIN_SRC emacs-lisp
  (setq version-control t     ;; Use version numbers for backups.
        kept-new-versions 10  ;; Number of newest versions to keep.
        kept-old-versions 0   ;; Number of oldest versions to keep.
        delete-old-versions t ;; Don't ask to delete excess backup versions.
        backup-by-copying t  ;; Copy all files, don't rename them.
        auto-save-interval 100 ;; Change interval of characters to which auto-save is enabled
        )

  (setq vc-make-backup-files t)

  ;; Default and per-save backups go here:
  (setq backup-directory-alist '(("" . "~/.emacs_test.d/backup/per-save")))

  (defun force-backup-of-buffer ()
    ;; Make a special "per session" backup at the first save of each
    ;; emacs session.
    (when (not buffer-backed-up)
      ;; Override the default parameters for per-session backups.
      (let ((backup-directory-alist '(("" . "~/.emacs_test.d/backup/per-session")))
            (kept-new-versions 3))
        (backup-buffer)))
    ;; Make a "per save" backup on each save.  The first save results in
    ;; both a per-session and a per-save backup, to keep the numbering
    ;; of per-save backups consistent.
    (let ((buffer-backed-up nil))
      (backup-buffer)))

  (add-hook 'before-save-hook  'force-backup-of-buffer)
#+END_SRC
*** Edit and reload config
Small function to easily configure and reload the configuration file.

#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs_test.d/config.org"))

  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs_test.d/config.org")))
#+END_SRC
** Custom keystrokes
All (most) the custom key combinations that I use regularly.
#+BEGIN_SRC emacs-lisp
  ;; set up my own map for files, folder and windows
  (define-prefix-command 'z-map)
  (global-set-key (kbd "C-z") 'z-map)
  (define-key z-map (kbd "a") 'org-agenda-show-agenda-and-todo)
  (define-key z-map (kbd "c") 'avy-goto-char)
  (define-key z-map (kbd "n") 'narrow-or-widen-dwim)
  (define-key z-map (kbd "t") 'toggle-transparency)
  (define-key z-map (kbd "e") 'config-visit)
  (define-key z-map (kbd "r") 'config-reload)
  (define-key z-map (kbd "z") (defun zshrcEdit () (interactive) (find-file "~/.zshrc")))
  (define-key z-map (kbd "i") (defun indexEdit() (interactive) (find-file "~/Dropbox/orgfiles/index.org")))
  (define-key z-map (kbd "s") (defun skhdEdit() (interactive) (find-file "~/.skhdrc")))
  (define-key z-map (kbd "k") (defun keyboardEdit() (interactive) (find-file "~/qmk_firmware/keyboards/keebio/iris/keymaps/popoiopo/keymap.c")))
  (define-key z-map (kbd "y") (defun yabaiEdit() (interactive) (find-file "~/.yabairc")))
  (define-key z-map (kbd "q") (defun qutebrowserEdit() (interactive) (find-file "~/.qutebrowser/qutemacs.py")))
  (define-key z-map (kbd "b") (defun bibtexEdit() (interactive) (find-file "~/Dropbox/bibliography/references.bib")))
  ;; (define-key z-map (kbd "") (defun bibNotesEdit() (interactive) (find-file "~/Dropbox/bibliography/Notes.org")))
  (define-key z-map (kbd "<left>") 'shrink-window-horizontally)
  (define-key z-map (kbd "<right>") 'enlarge-window-horizontally)
  (define-key z-map (kbd "<down>") 'shrink-window)
  (define-key z-map (kbd "<up>") 'enlarge-window)
  (define-key z-map (kbd "C-j") 'org-journal-new-entry) 
  (define-key z-map (kbd "C-t") 'org-journal-today)
  (define-key z-map (kbd "C-<up>") 'buf-move-up)
  (define-key z-map (kbd "C-<down>") 'buf-move-down)
  (define-key z-map (kbd "C-<left>") 'buf-move-left)
  (define-key z-map (kbd "C-<right>") 'buf-move-right)

  ;; ORG extra keybinding
  (global-set-key (kbd "C-c l") 'org-store-link)

  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)

  (global-set-key (kbd "C-,") 'mc/unmark-previous-like-this)
  (global-set-key (kbd "C-.") 'mc/unmark-next-like-this)

  (global-set-key (kbd "C-M-<") 'mc/skip-to-previous-like-this)
  (global-set-key (kbd "C-M->") 'mc/skip-to-next-like-this)

  (global-set-key (kbd "C-M-,") 'mc/mark-all-like-this)
  (global-set-key (kbd "C-M-.") 'mc/edit-lines)

  (global-set-key (kbd "C-;") 'mc/insert-numbers)
  (global-set-key (kbd "C-M-;") 'mc/insert-letters)

  (global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)
#+END_SRC
** Exporting
*** Org to latex blank lines
Here we make a small adaption in exporting to latex file. A double newline is translated to a bigskip, thus creating an extra whitespace in the resulting pdf.
#+BEGIN_SRC emacs-lisp
  ;; replace \n\n with bigskip
  (defun my-replace-double-newline (backend)
    "replace multiple blank lines with bigskip"
    (interactive)
    (goto-char (point-min))
    (while (re-search-forward "\\(^\\s-*$\\)\n\n+" nil t)
      (replace-match "\n#+LATEX: \\par\\vspace{\\baselineskip}\\noindent\n" nil t)
      ;;(replace-match "\n#+LATEX: \\bigskip\\noindent\n" nil t)
      (forward-char 1)))

  (add-hook 'org-export-before-processing-hook 'my-replace-double-newline)
#+END_SRC
*** Export to word
#+BEGIN_SRC emacs-lisp
  ;; This setup is tested on Emacs 24.3 & Emacs 24.4 on Linux/OSX
  ;; org v7 bundled with Emacs 24.3
  (setq org-export-odt-preferred-output-format "doc")
  ;; org v8 bundled with Emacs 24.4
  (setq org-odt-preferred-output-format "doc")
  ;; BTW, you can assign "pdf" in above variables if you prefer PDF format

  ;; Only OSX need below setup
  (defun my-setup-odt-org-convert-process ()
    (interactive)
    (let ((cmd "/Applications/LibreOffice.app/Contents/MacOS/soffice"))
      (when (and (eq system-type 'darwin) (file-exists-p cmd))
        ;; org v7
        (setq org-export-odt-convert-processes '(("LibreOffice" "/Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to %f%x --outdir %d %i")))
        ;; org v8
        (setq org-odt-convert-processes '(("LibreOffice" "/Applications/LibreOffice.app/Contents/MacOS/soffice --headless --convert-to %f%x --outdir %d %i"))))
      ))
  (my-setup-odt-org-convert-process)
#+END_SRC
** Gimmicks
Just some small functions that can be used for (almost) useless things.
*** Transparency
#+BEGIN_SRC emacs-lisp
  ;;(set-frame-parameter (selected-frame) 'alpha '(<active> . <inactive>))
  ;;(set-frame-parameter (selected-frame) 'alpha <both>)
  (set-frame-parameter (selected-frame) 'alpha '(100 . 100))
  (add-to-list 'default-frame-alist '(alpha . (100 . 100)))

  (defun toggle-transparency ()
     (interactive)
     (let ((alpha (frame-parameter nil 'alpha)))
       (set-frame-parameter
        nil 'alpha
        (if (eql (cond ((numberp alpha) alpha)
                       ((numberp (cdr alpha)) (cdr alpha))
                       ;; Also handle undocumented (<active> <inactive>) form.
                       ((numberp (cadr alpha)) (cadr alpha)))
                 100)
            '(95 . 95) '(100 . 100)))))
#+END_SRC
** Navigation
*** avy
Avy is a powerful search package that lets you quickly navigate to wherever in your screen you want to go.
#+BEGIN_SRC emacs-lisp
  (use-package avy :ensure t)
#+END_SRC
*** Multiple Cursors
Use multi cursor editing easily. For keybindings, see [[*Custom keystrokes][Custom keystrokes]].
#+BEGIN_SRC emacs-lisp
  (require 'multiple-cursors)
#+END_SRC

** Management - Knowledge
*** Citations
*** Org roam
One of the cornerstones of my knowledge management. This is based on Roam research or zettelkasten. 
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
        :ensure t
        :hook
        (after-init . org-roam-mode)
        :custom
        (org-roam-directory "~/Dropbox/RoamNotes/")
        (org-roam-db-location "/Users/chatel/org-roam.db")
        :bind (:map org-roam-mode-map
                (("C-c n l" . org-roam)                          ;; Show backlinks in an extra buffer on the left
                 ("C-c n f" . orb-find-non-ref-file)             ;; Find your notes easily through the database
                 ("C-c n g" . org-roam-graph-show))              ;; Show your knowledge-base in graph shape
                :map org-mode-map
                (("C-c n i" . orb-insert-non-ref))               ;; Insert a link to a note
                (("C-c n I" . org-roam-insert-immediate))))      ;; Same as previous

  (setq org-roam-capture-templates
        '(
          ;; Alle informatie met referenties naar waar ik het vandaan heb. Dit wordt het grootste deel die concepten uitlegt met referenties naar snippets.
          ("k" "Knowledge base" plain (function org-roam--capture-get-point)
          "%?"
          :file-name "knowledge_base/%<%Y%m%d%H%M%S>-${slug}"
          :head "#+title: ${title}\n\n- tags :: [[file:20200729175519-knowledge_base.org][Knowledge base]]\n\n* "
          :unnarrowed t)

          ;; Hier staat alle informatie over mensen die ik ken; waar ik ze van ken, waar ze goed in zijn, verjaardag, etc. Dit functioneert als basis waar ik naar kan refereren als ik hulp nodig heb van iemand en ook voor leuk dat ik kan terug zien wat ik met die persoon heb gedaan vanuit de org-journal folder.
          ("p" "Personal" plain (function org-roam--capture-get-point)
            "%?"
            :file-name "personal/%<%Y%m%d%H%M%S>-${slug}"
            :head "#+title: ${title}\n\n- tags ::  [[file:20200729175551-personal.org][personal]]\n- birthday :: \n- Contact\n  - Phonenumber :: \n  - Email :: \n\n* "
            :unnarrowed t)

          ;; Hier komen alle interessante ideeën die niet perse met literatuur versterkt worden, niet goed uitgewerkt zijn of simpelweg een interessante notion is waar ik later iets mee kan.
          ("i" "Ideas" plain (function org-roam--capture-get-point)
            "%?"
            :file-name "ideas/%<%Y%m%d%H%M%S>-${slug}"
            :head "#+title: ${title}\n\n- tags :: [[file:20200729175615-ideas.org][Ideas]]\n\n* "
            :unnarrowed t)

          ;; Alle volledig uitgewerkte papers, blog posts, werken die ik doe (nog even nadenken of dit privé moet of niet, denk het wel want publicaties en protocols etc)
          ("a" "Papers and Articles" plain (function org-roam--capture-get-point)
            "%?"
            :file-name "papers_and_articles/%<%Y%m%d%H%M%S>-${slug}"
            :head "#+title: ${title}\n\n- tags :: [[file:20200729175758-papers_and_articles.org][papers_and_articles]]\n\n* "
            :unnarrowed t)

          ;; Alle volledig uitgewerkte papers, blog posts, werken die ik doe (nog even nadenken of dit privé moet of niet, denk het wel want publicaties en protocols etc)
          ("w" "Work" plain (function org-roam--capture-get-point)
            "%?"
            :file-name "work/%<%Y%m%d%H%M%S>-${slug}"
            :head "#+title: ${title}\n\n- tags :: [[file:20200902142233-work.org][work]]\n\n* "
            :unnarrowed t)

          ;; Hier staan, labelled per programmeer taal en functie (optimization, plotting, etc.), de snippets voor bepaalde methodes, wiskundige formules die uitgeprogrammeerd zijn etc.
          ("s" "Snippets" plain (function org-roam--capture-get-point)
            "%?"
            :file-name "snippets/%<%Y%m%d%H%M%S>-${slug}"
            :head "#+title: ${title}\n\n- tags :: [[file:20200729175823-snippets.org][snippets]]\n\n* "
            :unnarrowed t)
          )
        )

  ;; On search for notes, prepend its respective directory name
  (setq org-roam-tag-sources '(prop last-directory))
#+END_SRC
** Management - Workflow/project
*** Tags
#+BEGIN_SRC emacs-lisp
  (setq org-tag-alist '(("@short" . ?s) ("@medium" . ?m) ("@long" . ?l) ("@very long" . ?v)
                        ("@write" . ?w) ("@read" . ?r) ("@code" . ?c) ("@email" . ?e) ("@bellen" . ?b)
                        ("@kopen" . ?k) ("@terugbetalen" . ?t) ("@gaan" . ?g)))
#+END_SRC
*** Org Journal
A big part of my workflow. In the beginning of each day I create a journal entry that uses org-journal to take all my current TODOs to the new day. The new entry is filled with org-journal-file-header-func as a template, carries over all elements that are defined in org-journal-carryover-items and puts them under the TODO header.
#+BEGIN_SRC emacs-lisp
  (use-package org-journal
    :ensure t
    :defer t
    :config
    (setq org-journal-dir "~/Dropbox/RoamNotes/org-journal/"
          org-journal-enable-agenda-integration t
          org-journal-date-prefix "#+TITLE: "
          org-journal-file-format "%Y-%m-%d.org"
          org-journal-date-format "%A, %d %B %Y"))

  (setq org-journal-carryover-items "TODO=\"TODO\"|TODO=\"DOING\"|TODO=\"WAITING\"|TODO=\"FLEETING\"|TODO=\"LONGTERM\"")

  (defun org-journal-file-header-func (time)
    "Custom function to create journal header."
    (concat
      (pcase org-journal-file-type
        (`daily (concat "#+TITLE: " (format-time-string org-journal-date-format time) "\n#+STARTUP: folded\n* Tags and resources\n- tags :: \n- resources ::\n* TODOS\n")))))

  (setq org-journal-file-header 'org-journal-file-header-func)

  (require 'org-journal)

  (defun org-journal-find-location ()
    ;; Open today's journal, but specify a non-nil prefix argument in order to
    ;; inhibit inserting the heading; org-capture will insert the heading.
    (org-journal-new-entry t)
    ;; Position point on the journal's top-level heading so that org-capture
    ;; will add the new entry as a child entry.
    (goto-char (point-min)))

  (defun org-journal-save-entry-and-exit()
    "Simple convenience function.
    Saves the buffer of the current day's entry and kills the window
    Similar to org-capture like behavior"
    (interactive)
    (save-buffer)
    (kill-buffer-and-window))
  (define-key org-journal-mode-map (kbd "C-x C-s") 'org-journal-save-entry-and-exit)

  (defun org-journal-today ()
      (interactive)
      (org-journal-new-entry t))
#+END_SRC
** Org
*** Org-bullets
Small package that makes the org hierachy a little bit more appealing. The stars are changed into icons for example.
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
*** Writing improvements
Some of the adjustments are *stolen* from [[https://explog.in/notes/writingsetup.html][this guy]]. It mainly revolves around using screenspace efficiently instead of randomly adding whitespace, or not displaying whitespace where there actually is whitespace.
#+BEGIN_SRC emacs-lisp
  (setq org-indent-indentation-per-level 1)             ;; Shorten the space on the left side with org headers
  (setq org-adapt-indentation nil)                      ;; Adapt indentation to outline node level. Set to nill as it takes up space.
  (setq org-hide-emphasis-markers t)                    ;; When making something bold *Hallo*, hide stars. Goes for all emphasis markers.
  (setq org-cycle-separator-lines 1)                    ;; Leave a single empty line between headers if there is one. Otherwise leave no room or make the empty lines belong to the previous header.
  (setq org-hide-leading-stars 't)                      ;; Hide the extra stars in front of a header (org-bullet displays nicer, but why add extra package)
  (customize-set-variable 'org-blank-before-new-entry 
                          '((heading . nil)
                            (plain-list-item . nil)))   ;; Dont randomly remove newlines below headers
#+END_SRC
*** Org Capture
Org capture makes creating a template from org a little easier. It creates a new file in which a function can be called and the template will be inserted.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c")
                  'org-capture)

  (setq org-capture-templates '(("j" "Journal entry" entry (function org-journal-find-location)
                                 "* Day journal\n** %(format-time-string org-journal-time-format)%?")))
#+END_SRC
** Standards (minor modes and minor improvements)
*** Alter annoying defaults
Small defaults to be changed as minor improvements. The changes are summarized next to it.
#+BEGIN_SRC emacs-lisp
  (setq save-interprogram-paste-before-kill t) ;; Perpetuates system clipboard
  (setq scroll-conservatively 1)      ;; Keep from making huge jumps when scrolling
  (setq ring-bell-function 'ignore)   ;; Unable annoying sounds
  (setq visible-bell 1)               ;; disable annoying windows sound
  (setq inhibit-startup-message t)    ;; Hide the startup message
  (setq display-time-24hr-format t)   ;; Format clock
  (setq-default display-line-numbers 'relative) ;; Setting the line numbers
  (when window-system (global-hl-line-mode t)) ;; Get a current line shadow in IDE
  (defalias 'yes-or-no-p 'y-or-n-p)   ;; Replace yes questions to y
#+END_SRC
*** Hungry-delete
Deletes all whitespace with a single delete of backspace.
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC
*** Minor modes
Some minor modes that are turned on or off. Next to each, a short description is given of what it changes.
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)                  ;; Get rid of tool-bar
  (menu-bar-mode -1)                  ;; Git rid of menu
  (scroll-bar-mode -1)                ;; Get rid of scroll-bar
  (global-auto-revert-mode 1)         ;; Make sure that you're always looking at the latest version of a file. Change file when changed on disk
  (delete-selection-mode 1)           ;; Remove text from selection instead of just inserting text
  (display-time-mode 1)               ;; Set clock on lower right side
  (electric-pair-mode t)              ;; Enable electric pair mode. It autocompletes certain pairs. E.g., (), {}, [], <>
  (global-subword-mode 1)             ;; Cause M-f to move forward per capitalization within a word. E.g., weStopAtEveryCapital
  (visual-line-mode 1)                ;; Make sure that lines do not disapear at the right side of the screen but wrap around
#+END_SRC
*** Popup kill-ring
Show options out of the kill ring instead of cycling through each option.
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
*** Which key
Provides options for keystrokes. Super useful!
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC
*** TODOS
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keyword-faces
        '(
          ("DOING" . (:foreground "#05d3fc" :weight bold :box (:line-width 2 :style released-button)))
          ("WAITING" . (:foreground "#fcca05" :weight bold :box (:line-width 2 :style released-button)))
          ("FLEETING" . (:foreground "#f62af9" :weight bold :box (:line-width 2 :style released-button)))
          ("LONGTERM" . (:foreground "#c4013c" :weight bold :box (:line-width 2 :style released-button)))
          ("CANCELED" . (:foreground "#fc4205" :weight bold :box (:line-width 2 :style released-button)))
          ))

  (setq org-todo-keywords
        '((sequence "TODO(t)" "DOING(d)" "WAITING(w)" "FLEETING(f)" "|" "LONGTERM(l)" "CANCELED(c)" "DONE(f)")))
#+END_SRC
** Try package
Have the option to try packages without actually installing them. If you do

#+BEGIN_SRC
M-x try
#+END_SRC

It will give you the option to temporarily install the package. If you close and reopen emacs, the tried out package is removed.

#+BEGIN_SRC emacs-lisp
  (use-package try
      :ensure t)
#+END_SRC
** Visual
*** Beacon
Small package to provide an idea where in which buffer the cursor is atm by showing a small light in the current frame.
#+BEGIN_SRC emacs-lisp
  (use-package beacon
      :ensure t
      :init
      (beacon-mode 1))
#+END_SRC
*** rainbow
Visualize color codings. So RGB will be colored in its respective color.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC

Make visual pairs of delimeters ({<[]>}) etc. Each level gets its own color so it's easy to spot which are pairs.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+END_SRC
*** Doom theme
This causes emacs to look a lot better overall. [[https://github.com/hlissner/emacs-doom-themes][This package]] makes the coloring and font decissions, so you don't have to. There is a seperate package for the mode-line (the line that containts the time and which file etc.)
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-one t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+END_SRC
*** all-the-icons
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons :ensure t)
#+END_SRC
* Shortcuts
Here I provide some common shortcuts that I tend to use or want to remember. 
** Shorthand notations
There are some shorthands for certain keys, these are as follows:
|-----------+----------------------------------------|
| Shorthand | Corresponding key                      |
|-----------+----------------------------------------|
| C         | Control                                |
| M         | Meta, option or alt (depending on OS)  |
| RET       | Return or enter                        |
| S         | Shift                                  |
| SPC       | Space bar                              |
| TAB       | Tab key                                |
| prefix    | C-u followed by the shortcut           |
| VERT      | This is a pipe sign |, it is described |
|           | like this since Org treats this as a   |
|           | new column                             |
|-----------+----------------------------------------|
** Navigation
|---------------+-------------------------------------------------------------|
| Shortcut      | Description                                                 |
|---------------+-------------------------------------------------------------|
| *Beginner*      |                                                             |
|---------------+-------------------------------------------------------------|
| PREFIX NUMBER | By typing the PREFIX (C-u) with a number after it followed  |
|               | by a command, you in principle repeat the command number of |
|               | times                                                       |
| C-n           | Move cursor down (next)                                     |
| C-p           | Move cursor up (previous)                                   |
| C-b           | Move cursor left (back)                                     |
| M-b           | Move cursor back one word                                   |
| C-f           | Move cursor right (forward)                                 |
| M-f           | Move cursor forward one word                                |
| C-a           | Move cursor to beginning of line                            |
| M-a           | Move cursor to beginning of current or previous sentence    |
| C-e           | Move cursor to end of line                                  |
| M-e           | Move cursor to end of current or next sentence              |
| M-{           | Move cursor to beginning or previous paragraph              |
| M-}           | Move cursor to end or next paragraph                        |
|---------------+-------------------------------------------------------------|
| *Intermediate*  |                                                             |
|---------------+-------------------------------------------------------------|
| M-g M-g       | Asks you a number and then goes to that line number         |
|               |                                                             |
|---------------+-------------------------------------------------------------|
** Org
*** Regular ORG
*** Tables
Here are some shortcuts that I regularly use or want to have handy nearby. For a more exhaustive list, check [[https://orgmode.org/manual/Built_002din-Table-Editor.html#Built_002din-Table-Editor][the org table manual]].

|------------------------+------------------------------------------------------------------------|
| Shortcut               | Description                                                            |
|------------------------+------------------------------------------------------------------------|
| *Re-aligning and motion* |                                                                        |
|------------------------+------------------------------------------------------------------------|
| C-c C-c                | Re-align without moving                                                |
| TAB                    | Re-align table, move to next field and create new row if needed        |
| RET                    | Move cursor to next row or create a row (useful with horizontal lines) |
| M-a or M-e             | Move to beginning or end of current field, or next field               |
|------------------------+------------------------------------------------------------------------|
| *Regions*                |                                                                        |
|------------------------+------------------------------------------------------------------------|
| M-RET                  | Split current field at point and paste what comes after to new line    |
|------------------------+------------------------------------------------------------------------|
| *Column and Row editing* |                                                                        |
|------------------------+------------------------------------------------------------------------|
| C-c RET                | Insert horizontal line                                                 |
| C-c -                  | Insert a horizontal line below, with prefix it is above                |
| C-c ^                  | Sort by column on point                                                |
| S-ARROW_KEY            | Move current cell in the direction of the used arrow key               |
| M-ARROW_KEY            | Move current column or row in the direction of the used arrow key      |
| M-S-LEFT or M-S-UP     | Kill current column or row, respectively                               |
| M-S-RIGHT or M-S-DOWN  | Add column or row                                                      |
|------------------------+------------------------------------------------------------------------|
| *Calculations*           |                                                                        |
|------------------------+------------------------------------------------------------------------|
| C-c +                  | You can paste (C-y) a column sum into a field                          |
| S-RET                  | Auto-increment downward is current field is a number or if current     |
|                        | is empty, copy the one from above.                                     |
|------------------------+------------------------------------------------------------------------|
| *Misc*                   |                                                                        |
|------------------------+------------------------------------------------------------------------|
| C-c VERT               | Create table or convert from region (csv style)                        |
| C-c `                  | Used if you want a seperate buffer to alter a field                    |
|------------------------+------------------------------------------------------------------------|
*** Exporting
